name: Docker

on:
    pull_request:
        paths:
            - 'docker/**'
            - '.github/workflows/docker.yml'
    schedule:
      - cron: '0 0 * * *'

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:

  docker_builds:

    strategy:
      fail-fast: false
      matrix:
        platform: ["arm64", "amd64"]
        base: ["alpine", "ubuntu"]
        size: ["small"]
        proprietary_sdks: ['false']
        include:
          - platform: arm64
            os: ubuntu-24.04-arm
          - platform: amd64
            os: ubuntu-24.04
          - base: ubuntu
            size: full
          - base: alpine
            size: normal
          - platform: amd64
            base: ubuntu
            size: full
            os: ubuntu-24.04
            proprietary_sdks: true

    name: ${{ matrix.base }}-${{ matrix.size }}-${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
      attestations: write
      packages: write
      id-token: write

    steps:
      - name: Set PUSH_PACKAGE due to schedule
        if: github.event.schedule=='*/0 * * * *'
        run: |
          echo "::set-env name=PUSH_PACKAGES::true"
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Set up Docker
        uses: docker/setup-docker-action@v4
        with:
          daemon-config: |
            {
              "debug": false,
              "features": {
                "containerd-snapshotter": true
              }
            }
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract container metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/osgeo/gdal
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index
      - name: Build
        shell: bash -l {0}
        run: |
          cd docker/${{ matrix.base }}-${{ matrix.size }}
          if test "${{ matrix.proprietary_sdks }}" = "true"; then
            ./build.sh --platform linux/${{ matrix.platform }} --with-multi-arch --with-oracle --with-mrsid --with-ecw
          else
            ./build.sh --platform linux/${{ matrix.platform }} --with-multi-arch
          fi
          docker run --rm ghcr.io/osgeo/gdal:${{ matrix.base }}-${{ matrix.size }}-latest-${{ matrix.platform }} gdalinfo --formats
          docker run --rm ghcr.io/osgeo/gdal:${{ matrix.base }}-${{ matrix.size }}-latest-${{ matrix.platform }} ogrinfo --formats

  create-manifest:
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    runs-on: ubuntu-latest
    needs: docker_builds
    strategy:
      fail-fast: false
      matrix:
        tag: ["ubuntu-full", "ubuntu-small", "alpine-small", "alpine-normal"]
    steps:
      - name: Set PUSH_PACKAGE due to schedule
        if: github.event.schedule=='*/0 * * * *'
        run: |
          echo "::set-env name=PUSH_PACKAGES::true"
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: env.PUSH_PACKAGES == 'true'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push multi-platform manifest
        if: env.PUSH_PACKAGES == 'true'
        run: |
          docker buildx imagetools create \
          -t ghcr.io/osgeo/gdal:${{ matrix.tag }}-latest \
          ghcr.io/osgeo/osgeo:${{ matrix.tag }}-latest-amd64 \
          ghcr.io/osgeo/osgeo:${{ matrix.tag }}-latest-arm64
