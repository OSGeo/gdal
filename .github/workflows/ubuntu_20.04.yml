name: Ubuntu 20.04 build

on:
    push:
        paths-ignore:
            - 'gdal/doc/**'
    pull_request:
        paths-ignore:
            - 'gdal/doc/**'


jobs:

  ubuntu_20_04_build:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache
        uses: actions/cache@v2
        id: cache
        with:
          path: |
                /tmp/docker
                ${{ github.workspace }}/ccache.tar.gz
          key: ${{ runner.os }}-cache-ubuntu-20.04-${{ hashFiles('.github/workflows/ubuntu_20.04/build-deps.sh') }}-${{ github.run_id }}
          restore-keys: ${{ runner.os }}-cache-ubuntu-20.04-${{ hashFiles('.github/workflows/ubuntu_20.04/build-deps.sh') }}-

      - name: Build or restore dependencies
        run: |
            if test -f /tmp/docker/gdal-deps-ubuntu-20.04.tar; then
                docker image load -i /tmp/docker/gdal-deps-ubuntu-20.04.tar
                docker images
            else
                docker build -f .github/workflows/ubuntu_20.04/Dockerfile.deps -t gdal-deps-ubuntu-20.04 .github/workflows/ubuntu_20.04
                mkdir -p /tmp/docker
                docker image save -o /tmp/docker/gdal-deps-ubuntu-20.04.tar gdal-deps-ubuntu-20.04
            fi

      - name: gcc compilation flags
        run: docker run --rm gdal-deps-ubuntu-20.04 sh -c "g++ -march=native -dM -E -x c++ - < /dev/null | grep -E 'SSE|AVX'"

      - name: Build
        run: docker build -f .github/workflows/ubuntu_20.04/Dockerfile -t gdal .

      - name: Fetching ccache.tar.gz from Docker build
        run: docker run --rm -v $PWD:/mytmp gdal cp /build/ccache.tar.gz /mytmp

      - name: Run C++ tests
        run: docker run -e GITHUB_WORKFLOW --rm gdal sh -c "cd /build/autotest/cpp && make quick_test && make testsse2 && (if (g++ -march=native -dM -E -x c++ - < /dev/null | grep AVX2 >/dev/null); then make testavx2; else /bin/true; fi)"

      - name: Run SWIG Perl tests
        run: docker run --rm gdal sh -c "cd /build/gdal/swig/perl && make test"

      - name: Run SWIG Java tests
        run: docker run --rm gdal sh -c "cd /build/gdal/swig/java && make test"

      - name: Run SWIG CSharp tests
        run: docker run --rm gdal sh -c "cd /build/gdal/swig/csharp && make && make test"

      - name: Build GDAL Python sdist distribution
        run: docker run --rm gdal sh -c "cd /build/gdal/swig/python && python3 setup.py sdist"

      - name: Build gdal-utils Python bdist_wheel distribution
        run: docker run --rm gdal sh -c "cd /build/gdal/swig/python/gdal-utils && python3 -m pip install wheel && python3 setup.py bdist_wheel"

      - name: Run pytest
        # --security-opt seccomp=unconfined, so that the userfaulfd syscall is available
        run: docker run -e CI -e TRAVIS=yes -e TRAVIS_BRANCH=ubuntu_2004 -e GITHUB_WORKFLOW --security-opt seccomp=unconfined --rm gdal sh -c "cd /build/autotest && pip3 install -U -r requirements.txt && pytest"
