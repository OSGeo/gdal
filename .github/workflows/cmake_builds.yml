# build GDAL library and to run test with CMake

name: Build and test with CMake

on:
    push:
        paths-ignore:
            - 'doc/**'
    pull_request:
        paths-ignore:
            - 'doc/**'

env:
  CMAKE_UNITY_BUILD: OFF

jobs:

  build-linux-ubuntu-focal:
    runs-on: ubuntu-20.04
    env:
      CMAKE_OPTIONS: -DPython_LOOKUP_VERSION=3.8 -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache
    steps:
    - name: Checkout GDAL
      uses: actions/checkout@v2
    - run: |
        cmake --version
    - name: Install dependency
      run: |
        sudo add-apt-repository -y ppa:ubuntugis/ubuntugis-unstable
        sudo apt-get update
        sudo apt-get install -y -q bison libjpeg-dev libgif-dev liblzma-dev libzstd-dev libgeos-dev git \
           libcurl4-gnutls-dev libproj-dev libxml2-dev  libxerces-c-dev libnetcdf-dev netcdf-bin \
           libpoppler-dev libpoppler-private-dev gpsbabel libhdf4-alt-dev libhdf5-serial-dev libpodofo-dev poppler-utils \
           libfreexl-dev unixodbc-dev libwebp-dev libepsilon-dev liblcms2-2 libcrypto++-dev libdap-dev libkml-dev \
           libmysqlclient-dev libarmadillo-dev wget libfyba-dev libjsoncpp-dev libexpat1-dev \
           libclc-dev ocl-icd-opencl-dev libsqlite3-dev sqlite3-pcre libpcre3-dev libspatialite-dev libsfcgal-dev fossil libcairo2-dev libjson-c-dev libdeflate-dev liblz4-dev libblosc-dev \
           libqhull-dev libcfitsio-dev libogdi-dev libopenjp2-7-dev libcharls-dev libheif-dev \
           python3-dev libpython3-dev libpython3.8-dev python3.8-dev python3-numpy python3-lxml pyflakes python3-setuptools python3-pip python3-venv \
           python3-pytest swig doxygen texlive-latex-base make cppcheck ccache g++ \
           libpq-dev libpqtypes-dev postgresql-12 postgresql-12-postgis-3 postgresql-client-12 postgresql-12-postgis-3-scripts
        # MSSQL: client side
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
        sudo apt-get update
        sudo ACCEPT_EULA=Y apt-get install -y msodbcsql17 unixodbc-dev
        #
        # Workaround bug in ogdi packaging
        sudo ln -s /usr/lib/ogdi/libvrf.so /usr/lib
        #
        python3 -m pip install -U pip wheel setuptools numpy
        python3 -m pip install -r $GITHUB_WORKSPACE/autotest/requirements.txt
    - name: Configure
      run: |
        mkdir -p $GITHUB_WORKSPACE/superbuild
        cd $GITHUB_WORKSPACE/superbuild
        printf "cmake_minimum_required(VERSION 3.10)\nproject(test)\nenable_testing()\nadd_subdirectory(gdal)" > CMakeLists.txt
        ln -s .. gdal
        mkdir build
        cd build
        cmake  ${CMAKE_OPTIONS} -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install-gdal -DCMAKE_UNITY_BUILD=${CMAKE_UNITY_BUILD} -DCMAKE_C_FLAGS=-Werror -DCMAKE_CXX_FLAGS=-Werror -DGDAL_USE_PUBLICDECOMPWT:BOOL=ON ..
    - name: Build
      run: |
        cmake --build $GITHUB_WORKSPACE/superbuild/build -j $(nproc)
    - name: test (with command targets)
      run: |
        cmake --build $GITHUB_WORKSPACE/superbuild/build --target quicktest -j $(nproc)
    - name: test (with ctest)
      run: |
        ctest --test-dir $GITHUB_WORKSPACE/superbuild/build -V
    - name: install
      run: |
        cmake --build $GITHUB_WORKSPACE/superbuild/build --target install -j $(nproc)
        export LD_LIBRARY_PATH=$GITHUB_WORKSPACE/install-gdal/lib
        $GITHUB_WORKSPACE/install-gdal/bin/gdalinfo --version
        PYTHONPATH=$GITHUB_WORKSPACE/install-gdal/lib/python3/dist-packages python3 -c "from osgeo import gdal;print(gdal.VersionInfo(None))"
    - name: Standalone Python bindings build
      run: |
        (cd $GITHUB_WORKSPACE/superbuild/build/gdal/swig/python && python setup.py sdist)
        mv $GITHUB_WORKSPACE/superbuild/build/gdal/swig/python/dist/GDAL-*.tar.gz gdal-python.tar.gz
        rm -rf $GITHUB_WORKSPACE/superbuild/build/gdal/swig/python
        # Set PATH so that gdal-config is found
        PATH=$GITHUB_WORKSPACE/install-gdal/bin:$PATH pip install --user gdal-python.tar.gz

  build-windows-msys2-mingw:
    runs-on: windows-latest
    env:
      generator: MinGW Makefiles
      JAVA_HOME: "C:\\Program Files\\Java\\zulu-11-azure-jdk_11.33.15-11.0.4-win_x64"
    steps:
      # To avoid git clone to mess with the line endings of GDAL autotest data
      # files that look like text, but should be handled as binary content
      - name: Set git core.autocrlf to false
        run: |
          git config --global core.autocrlf false
      - name: Checkout GDAL
        uses: actions/checkout@v2
      - name: Install MSYS2
        run: choco install --yes msys2
      - name: Install development packages
        run: |
          $script = @'
          pacman -S --noconfirm base-devel
          pacman -S --noconfirm mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-ccache
          pacman -S --noconfirm mingw-w64-x86_64-proj mingw-w64-x86_64-geos mingw-w64-x86_64-hdf5 mingw-w64-x86_64-netcdf mingw-w64-x86_64-openjpeg mingw-w64-x86_64-poppler mingw-w64-x86_64-libtiff mingw-w64-x86_64-libpng mingw-w64-x86_64-xerces-c mingw-w64-x86_64-libfreexl mingw-w64-x86_64-libgeotiff mingw-w64-x86_64-libspatialite mingw-w64-x86_64-libtiff mingw-w64-x86_64-pcre mingw-w64-x86_64-postgresql mingw-w64-x86_64-zstd mingw-w64-x86_64-crypto++ mingw-w64-x86_64-cgal mingw-w64-x86_64-jasper mingw-w64-x86_64-python-numpy mingw-w64-x86_64-python-pytest mingw-w64-x86_64-python-setuptools
          cd /C/tools/msys64/mingw64/share/proj
          wget http://download.osgeo.org/proj/proj-datumgrid-1.8.tar.gz
          tar xvzf proj-datumgrid-1.8.tar.gz
          '@
          & c:\tools\msys64\usr\bin\bash.exe -lc $script
        env:
          MSYSTEM: MSYS
      - name: Install python dependencies for autotest
        run: |
          $script = @'
          python -m ensurepip --upgrade
          python -m pip install -U wheel setuptools numpy
          python -m pip install pytest pytest-env
          '@
          & c:\tools\msys64\usr\bin\bash.exe -lc $script
        env:
          MSYSTEM: MINGW64
      #  libxml2 disabled because currently causes a 'Imported target "LibXml2::LibXml2" includes non-existent path "/mingw64/include/libxml2" in its INTERFACE_INCLUDE_DIRECTORIES'
      # Disable mySQL since C:/mysql/lib/mysqlclient.lib (unrelated to msys) is found, which causes linking issues
      # Disable Python bindings because of 'ValueError: filename D:/a/gdal/gdal/swig/python/osgeo/__init__.py does not start with the input_base_dir D:/a/gdal/gdal/swig/python/osgeo/\' when running lib2to3
      # BUILD_CSHARP_BINDINGS=OFF because we get "AssemblyInfo.cs(98,12): error CS0246: The type or namespace name 'SecurityRules' could not be found (are you missing a using directive or an assembly reference?)" with Microsoft (R) Visual C# 2005 Compiler version 8.00.50727.9031 for Microsoft (R) Windows (R) 2005 Framework version 2.0.50727
      - name: Configure
        run: cmake -DCMAKE_BUILD_TYPE=release -G "${env:generator}" "-DCMAKE_C_COMPILER_LAUNCHER=c:\tools\msys64\mingw64\bin\ccache.exe" "-DCMAKE_CXX_COMPILER_LAUNCHER=c:\tools\msys64\mingw64\bin\ccache.exe" "-DCMAKE_PREFIX_PATH=C:\tools\msys64\mingw64" "-DCMAKE_UNITY_BUILD=${env:CMAKE_UNITY_BUILD}" -S . -B "build" -DLIBXML2_INCLUDE_DIR=C:/tools/msys64/mingw64/include -DGDAL_USE_LIBXML2:BOOL=OFF -DGDAL_USE_MYSQL:BOOL=OFF -DBUILD_PYTHON_BINDINGS:BOOL=OFF -DBUILD_CSHARP_BINDINGS=OFF -DCMAKE_C_FLAGS=-Werror -DCMAKE_CXX_FLAGS=-Werror
        working-directory: ${{ github.workspace }}
      - name: Build
        run: cmake --build build -j 3
        working-directory: ${{ github.workspace }}
      # FIXME: enable some tests
      #- name: test
      #  run: cmake --build build --target quicktest
      #  working-directory: ${{ github.workspace }}
      #  env:
      #    PROJ_LIB: "C:\\tools\\msys64\\mingw64\\share\\proj"

  build-windows-conda:
    runs-on: windows-latest
    env:
        architecture: x64
        generator: Visual Studio 16 2019
        JAVA_HOME: "C:\\Program Files\\Java\\zulu-11-azure-jdk_11.33.15-11.0.4-win_x64"
    steps:
    # To avoid git clone to mess with the line endings of GDAL autotest data
    # files that look like text, but should be handled as binary content
    - name: Set git core.autocrlf to false
      run: |
        git config --global core.autocrlf false
    - name: Checkout GDAL
      uses: actions/checkout@v2
    - uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: gdalenv
        python-version: 3.7
        channels: conda-forge
    - run: |
        cmake --version
    - name: Install dependency
      shell: bash -l {0}
      run: |
        conda install --yes --quiet --name gdalenv curl libiconv icu git python=3.7 swig numpy pytest pytest-env zlib clcache lxml
        conda install --yes --quiet --name gdalenv -c conda-forge proj geos hdf4 hdf5 kealib \
            libnetcdf openjpeg poppler libtiff libpng xerces-c expat libxml2 kealib json-c \
            cfitsio freexl geotiff jpeg libpq libspatialite libwebp-base pcre pcre2 postgresql \
            sqlite tiledb zstd charls cryptopp cgal jasper doxygen librttopo libkml openssl xz \
            openjdk ant qhull armadillo blas blas-devel libblas libcblas liblapack liblapacke
        cd $CONDA_PREFIX/Library/share/proj
        curl http://download.osgeo.org/proj/proj-datumgrid-1.8.tar.gz > proj-datumgrid-1.8.tar.gz
        tar xvzf proj-datumgrid-1.8.tar.gz
        cd $OLDPWD
    - name: Configure
      shell: bash -l {0}
      # FIXME: Jasper manually disabled because of linking errors: lacks jp2_box_destroy
      # Disable MySQL because of "error LNK2038: mismatch detected for '_MSC_VER': value '1800' doesn't match value '1900' in ogrmysqldatasource.obj" and other errors
      # Disable LIBKML because of issue at linking time with kmlXXXX.lib being debug libraries
      # Note that the leading space in CMAKE_C/CXX_FLAGS=" /WX" is due to using Bash on Windows that would
      # otherwise interpret /bla has a file relative to the Bash root directory and would replace it by a path like c:\Program Files\git\WX
      # BUILD_JAVA_BINDINGS=OFF because we get "Error occurred during initialization of VM.   Corrupted ZIP library: C:\Miniconda\envs\gdalenv\Library\bin\zip.dll" when running java. Not reproducible on a standard VM
      # BUILD_CSHARP_BINDINGS=OFF because we get "AssemblyInfo.cs(98,12): error CS0246: The type or namespace name 'SecurityRules' could not be found (are you missing a using directive or an assembly reference?)" with Microsoft (R) Visual C# 2005 Compiler version 8.00.50727.9031 for Microsoft (R) Windows (R) 2005 Framework version 2.0.50727
      run: |
        mkdir -p $GITHUB_WORKSPACE/build
        cmake -A ${architecture} -G "${generator}" "-DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install-gdal" "-DCMAKE_C_COMPILER_LAUNCHER=clcache" "-DCMAKE_CXX_COMPILER_LAUNCHER=clcache" "-DCMAKE_PREFIX_PATH=${CONDA_PREFIX}" -DCMAKE_UNITY_BUILD=${CMAKE_UNITY_BUILD} -S "$GITHUB_WORKSPACE" -B "$GITHUB_WORKSPACE/build" -DJASPER_LIBRARY_RELEASE:FILEPATH= -DLIBKML_BASE_LIBRARY:FILEPATH= -DGDAL_ENABLE_PLUGINS:BOOL=ON -DGDAL_ENABLE_PLUGINS_NO_DEPS:BOOL=ON -DGDAL_USE_PUBLICDECOMPWT:BOOL=ON -DBUILD_JAVA_BINDINGS=OFF -DBUILD_CSHARP_BINDINGS=OFF -DGDAL_USE_MYSQL:BOOL=OFF -DCMAKE_C_FLAGS=" /WX" -DCMAKE_CXX_FLAGS=" /WX"
    - name: Build
      shell: bash -l {0}
      run: cmake --build $GITHUB_WORKSPACE/build --config Release -j 2
    - name: test
      shell: bash -l {0}
      run: |
        cmake --build $GITHUB_WORKSPACE/build --config Release --target quicktest
    - name: test (with ctest)
      shell: bash -l {0}
      run: |
        ctest --test-dir $GITHUB_WORKSPACE/build -C Release -V -j 3
      env:
        SKIP_OGR_GMLAS_HUGE_PROCESSING_TIME: YES
    - name: Install
      shell: bash -l {0}
      run: |
        cmake --build $GITHUB_WORKSPACE/build --config Release --target install
        export PATH=$GITHUB_WORKSPACE/install-gdal/bin:$PATH
        gdalinfo --version
        PYTHONPATH=$GITHUB_WORKSPACE/install-gdal/lib/site-packages python3 -c "from osgeo import gdal;print(gdal.VersionInfo(None))"

  build-mac:
    runs-on: macOS-latest
    env:
      CMAKE_OPTIONS: -DGDAL_USE_GIFLIB_INTERNAL=YES -DCFITSIO_ROOT=/usr/local/opt/cfitsio  -DPoppler_ROOT=/usr/local/opt/poppler -DPROJ_ROOT=/usr/local/opt/proj -DLibXml2_ROOT=/usr/local/opt/libxml2 -DSPATIALITE_ROOT=/usr/local/opt/libspatialite -DPostgreSQL_ROOT=/usr/local/opt/libpq -DEXPAT_ROOT=/usr/local/opt/expat -DXercesC_ROOT=/usr/local/opt/xerces-c -DSQLite3_ROOT=/usr/local/opt/sqlite -DOpenSSL_ROOT=/usr/local/opt/openssl -DPNG_ROOT=/usr/local/opt/libpng -DJPEG_ROOT=/usr/local/opt/jpeg -DOpenJPEG_ROOT=/usr/local/opt/openjpeg -DCURL_ROOT=/usr/local/opt/curl -DGDAL_USE_DAP=OFF -DGDAL_USE_JASPER=OFF
    steps:
    - name: Setup xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 12.4
    - name: Checkout GDAL
      uses: actions/checkout@v2
    - run: |
        cmake --version
    - name: Install dependency
      run: |
        brew update
        brew outdated
        brew install postgresql || brew link postgresql
        brew install freexl libxml2 libspatialite geos proj openjpeg giflib szip postgis poppler doxygen unixodbc
        brew install ccache swig
        # gdal is automatically installed as a dependency for postgis
        brew uninstall --ignore-dependencies gdal
        cd /usr/local/share/proj
        curl http://download.osgeo.org/proj/proj-datumgrid-1.8.tar.gz > proj-datumgrid-1.8.tar.gz
        tar xvzf proj-datumgrid-1.8.tar.gz
        cd $OLDPWD
        python3 -m pip install -r $GITHUB_WORKSPACE/autotest/requirements.txt
    - name: Configure
      run: |
        mkdir -p $GITHUB_WORKSPACE/build
        cmake -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install-gdal ${CMAKE_OPTIONS} -DCMAKE_C_FLAGS=-Werror -DCMAKE_CXX_FLAGS=-Werror "-DCMAKE_C_COMPILER_LAUNCHER=ccache" "-DCMAKE_CXX_COMPILER_LAUNCHER=ccache" -DCMAKE_UNITY_BUILD=${CMAKE_UNITY_BUILD} -S "$GITHUB_WORKSPACE" -B "$GITHUB_WORKSPACE/build"
    - name: Build
      run: |
        cmake --build $GITHUB_WORKSPACE/build -j 3
        otool -L $GITHUB_WORKSPACE/build/libgdal.dylib
    - name: test
      run: cmake --build $GITHUB_WORKSPACE/build --target quicktest
    - name: test (with ctest)
      run: |
        ctest --test-dir $GITHUB_WORKSPACE/build -V -j 3
      env:
        GITHUB_WORKFLOW: "MacOS build"
    - name: Install
      run: cmake --build $GITHUB_WORKSPACE/build --target install -j 3
