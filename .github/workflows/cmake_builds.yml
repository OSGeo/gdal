# build GDAL library and to run test with CMake

name: Build and test with CMake

on:
    push:
        paths-ignore:
            - 'doc/**'
    pull_request:
        paths-ignore:
            - 'doc/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

env:
  CMAKE_UNITY_BUILD: OFF

jobs:

  build-linux-ubuntu-focal:
    runs-on: ubuntu-20.04
    env:
      CMAKE_OPTIONS: -DPython_LOOKUP_VERSION=3.8 -DUSE_CCACHE=ON
      cache-name: cmake-ubuntu-focal
    steps:
    - name: Checkout GDAL
      uses: actions/checkout@v2
    - name: Setup cache
      uses: actions/cache@v2
      id: cache
      with:
          path: ${{ github.workspace }}/.ccache
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.base_ref }}${{ github.ref_name }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-${{ github.base_ref }}
            ${{ runner.os }}-${{ env.cache-name }}
    - name: Install CMake 3.9.1
      run: |
        cd ${GITHUB_WORKSPACE}
        wget https://github.com/Kitware/CMake/releases/download/v3.9.1/cmake-3.9.1-Linux-x86_64.tar.gz
        tar xzf cmake-3.9.1-Linux-x86_64.tar.gz
        echo "CMAKE_DIR=$GITHUB_WORKSPACE/cmake-3.9.1-Linux-x86_64/bin" >> $GITHUB_ENV
        echo "$GITHUB_WORKSPACE/cmake-3.9.1-Linux-x86_64/bin" >> $GITHUB_PATH
    - run: |
        cmake --version
    - name: Install dependency
      run: |
        sudo add-apt-repository -y ppa:ubuntugis/ubuntugis-unstable
        sudo apt-get update
        sudo apt-get install -y -q bison libjpeg-dev libgif-dev liblzma-dev libzstd-dev libgeos-dev git \
           libcurl4-gnutls-dev libproj-dev libxml2-dev  libxerces-c-dev libnetcdf-dev netcdf-bin \
           libpoppler-dev libpoppler-private-dev gpsbabel libhdf4-alt-dev libhdf5-serial-dev libpodofo-dev poppler-utils \
           libfreexl-dev unixodbc-dev libwebp-dev libepsilon-dev liblcms2-2 libcrypto++-dev libdap-dev libkml-dev \
           libmysqlclient-dev libarmadillo-dev wget libfyba-dev libjsoncpp-dev libexpat1-dev \
           libclc-dev ocl-icd-opencl-dev libsqlite3-dev sqlite3-pcre libpcre3-dev libspatialite-dev libsfcgal-dev fossil libcairo2-dev libjson-c-dev libdeflate-dev liblz4-dev libblosc-dev \
           libqhull-dev libcfitsio-dev libogdi-dev libopenjp2-7-dev libheif-dev \
           python3-dev libpython3-dev libpython3.8-dev python3.8-dev python3-numpy python3-lxml pyflakes python3-setuptools python3-pip python3-venv \
           python3-pytest swig doxygen texlive-latex-base make cppcheck ccache g++ \
           libpq-dev libpqtypes-dev postgresql-12 postgresql-12-postgis-3 postgresql-client-12 postgresql-12-postgis-3-scripts
        # MSSQL: client side
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
        sudo apt-get update
        sudo ACCEPT_EULA=Y apt-get install -y msodbcsql17 unixodbc-dev
        # HANA: client side
        # Install hdbsql tool
        curl -v -j -k -s -L -H "Cookie: eula_3_1_agreed=tools.hana.ondemand.com/developer-license-3_1.txt" https://tools.hana.ondemand.com/additional/hanaclient-latest-linux-x64.tar.gz --output hanaclient-latest-linux-x64.tar.gz \
          && tar -xvf hanaclient-latest-linux-x64.tar.gz \
          && sudo mkdir /usr/sap \
          && sudo ./client/hdbinst -a client --sapmnt=/usr/sap \
          && rm -rf client \
          && rm hanaclient*
        export PATH=/usr/sap/hdbclient:$PATH
        # Download and compile odbc-cpp-wrapper
        sudo apt-get install -y -q cmake
        git clone https://github.com/SAP/odbc-cpp-wrapper.git \
          && mkdir odbc-cpp-wrapper/build \
          && cd odbc-cpp-wrapper/build \
          && /usr/bin/cmake .. \
          && make -j 2 \
          && sudo make install
        sudo ldconfig
        #
        # Workaround bug in ogdi packaging
        sudo ln -s /usr/lib/ogdi/libvrf.so /usr/lib
        #
        python3 -m pip install -U pip wheel setuptools numpy
        python3 -m pip install -r $GITHUB_WORKSPACE/autotest/requirements.txt
    - name: Install pdfium
      run: |
        wget -q https://github.com/rouault/pdfium_build_gdal_3_5/releases/download/v1_pdfium_4933/install-ubuntu2004-rev4933.tar.gz \
          && tar -xzf install-ubuntu2004-rev4933.tar.gz \
          && sudo chown -R root:root install \
          && sudo mv install/lib/* /usr/lib/ \
          && sudo mv install/include/* /usr/include/ \
          && sudo rm -rf install-ubuntu2004-rev4933.tar.gz install \
          && sudo apt-get update -y \
          && sudo apt-get install -y --fix-missing --no-install-recommends liblcms2-dev
    - name: Configure ccache
      run: |
          echo CCACHE_BASEDIR=$PWD >> ${GITHUB_ENV}
          echo CCACHE_DIR=$PWD/.ccache >> ${GITHUB_ENV}
          echo CCACHE_MAXSIZE=250M >> ${GITHUB_ENV}
          ccache -z
      working-directory: ${{ github.workspace }}
    - name: Configure
      run: |
        export PATH=$CMAKE_DIR:/usr/local/bin:/usr/bin:/bin # Avoid CMake config from brew etc.
        mkdir -p $GITHUB_WORKSPACE/superbuild
        cd $GITHUB_WORKSPACE/superbuild
        printf "cmake_minimum_required(VERSION 3.9)\nproject(test)\nenable_testing()\nadd_subdirectory(gdal)" > CMakeLists.txt
        ln -s .. gdal
        mkdir build
        cd build
        cmake  ${CMAKE_OPTIONS} -Werror=dev -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install-gdal -DCMAKE_UNITY_BUILD=${CMAKE_UNITY_BUILD} -DCMAKE_C_FLAGS=-Werror -DCMAKE_CXX_FLAGS=-Werror -DGDAL_USE_PUBLICDECOMPWT:BOOL=ON -DPUBLICDECOMPWT_URL=https://github.com/rouault/PublicDecompWT .. -DWERROR_DEV_FLAG="-Werror=dev"
    - name: Build
      run: |
        cmake --build $GITHUB_WORKSPACE/superbuild/build -- -j$(nproc)
      env:
        GIT_LFS_SKIP_SMUDGE: 1 # for PublicDecompWT github repository clone
    - name: test (with command targets)
      run: |
        cmake --build $GITHUB_WORKSPACE/superbuild/build --target quicktest -- -j$(nproc)
    - name: test (with ctest)
      run: |
        cd $GITHUB_WORKSPACE/superbuild/build
        ctest -V
    - name: install and uninstall
      run: |
        cmake --build $GITHUB_WORKSPACE/superbuild/build --target install -- -j$(nproc)
        cmake --build $GITHUB_WORKSPACE/superbuild/build --target uninstall
        find $GITHUB_WORKSPACE/install-gdal || /bin/true
    - name: install
      run: |
        touch $GITHUB_WORKSPACE/man/man1/gdalinfo.1
        touch $GITHUB_WORKSPACE/man/man1/gdaladdo.1
        (cd $GITHUB_WORKSPACE/superbuild/build; cmake ..)
        cmake --build $GITHUB_WORKSPACE/superbuild/build --target install -- -j$(nproc)
        test -f $GITHUB_WORKSPACE/install-gdal/share/man/man1/gdalinfo.1
        test -f $GITHUB_WORKSPACE/install-gdal/share/man/man1/gdaladdo.1
        export LD_LIBRARY_PATH=$GITHUB_WORKSPACE/install-gdal/lib
        $GITHUB_WORKSPACE/install-gdal/bin/gdalinfo --version
        PYTHONPATH=$GITHUB_WORKSPACE/install-gdal/lib/python3/dist-packages python3 -c "from osgeo import gdal;print(gdal.VersionInfo(None))"
    - name: Rerun using Mono
      run: |
        export PATH=$CMAKE_DIR:/usr/local/bin:/usr/bin:/bin # Avoid CMake config from brew etc.
        cd $GITHUB_WORKSPACE/superbuild/build
        rm -rf swig/csharp
        cmake  ${CMAKE_OPTIONS} -DCSHARP_MONO=ON -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install-gdal -DCMAKE_UNITY_BUILD=${CMAKE_UNITY_BUILD} -DCMAKE_C_FLAGS=-Werror -DCMAKE_CXX_FLAGS=-Werror ..
        cmake --build $GITHUB_WORKSPACE/superbuild/build --target install -- -j$(nproc)
        ctest -V -R "^csharp.*"
    - name: Standalone Python bindings build from source
      run: |
        (cd $GITHUB_WORKSPACE/superbuild/build/gdal/swig/python && python setup.py sdist)
        mv $GITHUB_WORKSPACE/superbuild/build/gdal/swig/python/dist/GDAL-*.tar.gz gdal-python.tar.gz
        mv $GITHUB_WORKSPACE/superbuild/build/gdal/swig/python gdal-swig-python
        python3 -m venv myvenv
        source myvenv/bin/activate
        # Set PATH so that gdal-config is found
        PATH=$GITHUB_WORKSPACE/install-gdal/bin:$PATH pip install gdal-python.tar.gz
        which gdal_edit.py
        cp $GITHUB_WORKSPACE/autotest/gcore/data/byte.tif .
        LD_LIBRARY_PATH=$GITHUB_WORKSPACE/install-gdal/lib ldd myvenv/lib/python3.8/site-packages/osgeo/_gdal.cpython-38-x86_64-linux-gnu.so
        LD_LIBRARY_PATH=$GITHUB_WORKSPACE/install-gdal/lib gdal_edit.py byte.tif -mo FOO=BAR
        rm -f myvenv/bin/gdal_edit.py
    - name: Standalone gdal-utils package from wheel
      run: |
        mv gdal-swig-python $GITHUB_WORKSPACE/superbuild/build/gdal/swig/python
        (cd $GITHUB_WORKSPACE/superbuild/build/gdal/swig/python/gdal-utils && python setup.py bdist_wheel)
        mv $GITHUB_WORKSPACE/superbuild/build/gdal/swig/python/gdal-utils/dist/*.whl gdal_utils-X.Y.Z.T-py3-none-any.whl
        rm -rf $GITHUB_WORKSPACE/superbuild/build/gdal/swig/python
        python3 -m venv myvenv
        source myvenv/bin/activate
        # Set PATH so that gdal-config is found
        PATH=$GITHUB_WORKSPACE/install-gdal/bin:$PATH pip install gdal_utils-X.Y.Z.T-py3-none-any.whl
        which gdal_edit
        cp $GITHUB_WORKSPACE/autotest/gcore/data/byte.tif .
        LD_LIBRARY_PATH=$GITHUB_WORKSPACE/install-gdal/lib gdal_edit byte.tif -mo FOO=BAR
        pip uninstall -y gdal-utils
    - name: Test post-install usage (with pkg-config)
      run: |
        ./autotest/postinstall/test_pkg-config.sh $GITHUB_WORKSPACE/install-gdal
    - name: Test post-install usage (with gdal-config)
      run: |
        ./autotest/postinstall/test_gdal-config.sh $GITHUB_WORKSPACE/install-gdal
    - name: Test post-install usage (with CMake)
      run: |
        ./autotest/postinstall/test_cmake.sh $GITHUB_WORKSPACE/install-gdal
    - name: Rerun with static linkage
      run: |
        export PATH=$CMAKE_DIR:/usr/local/bin:/usr/bin:/bin # Avoid CMake config from brew etc.
        cd $GITHUB_WORKSPACE/superbuild/build
        cmake  ${CMAKE_OPTIONS} .. \
          -DBUILD_SHARED_LIBS=OFF \
          -DBUILD_TESTING=OFF \
          -DCSHARP_MONO=OFF \
          -DGDAL_USE_HDF4=OFF \
          -DGDAL_USE_HDF5=OFF \
          -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install-gdal-static
        cmake --build $GITHUB_WORKSPACE/superbuild/build --target install -- -j$(nproc)
    - name: Test post-install usage (static, with pkg-config)
      run: |
        ./autotest/postinstall/test_pkg-config.sh $GITHUB_WORKSPACE/install-gdal-static --static
    - name: Test post-install usage (static, with gdal-config)
      run: |
        ./autotest/postinstall/test_gdal-config.sh $GITHUB_WORKSPACE/install-gdal-static --static
    - name: Test post-install usage (static, with CMake)
      run: |
        ./autotest/postinstall/test_cmake.sh $GITHUB_WORKSPACE/install-gdal-static --static
    - name: ccache statistics
      run: ccache -s

  build-windows-msys2-mingw:
    runs-on: windows-2022
    env:
      generator: MinGW Makefiles
      cache-name: cmake-mingw64
    defaults:
      run:
        shell: msys2 {0}
    steps:
      # To avoid git clone to mess with the line endings of GDAL autotest data
      # files that look like text, but should be handled as binary content
      - name: Set git core.autocrlf to false
        shell: bash -l {0}
        run: |
          git config --global core.autocrlf false
      - name: Checkout GDAL
        uses: actions/checkout@v2
      - name: Install development packages
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          # Disable mingw-w64-x86_64-crypto++ as it crashes at runtime on eedai_3 test. Likely a build issue with crypto++ itself
          install: |
            base-devel git mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-ccache
            mingw-w64-x86_64-pcre mingw-w64-x86_64-xerces-c mingw-w64-x86_64-zstd
            mingw-w64-x86_64-geos mingw-w64-x86_64-libspatialite mingw-w64-x86_64-proj
            mingw-w64-x86_64-cgal mingw-w64-x86_64-libfreexl mingw-w64-x86_64-hdf5 mingw-w64-x86_64-netcdf mingw-w64-x86_64-poppler mingw-w64-x86_64-postgresql
            mingw-w64-x86_64-libgeotiff mingw-w64-x86_64-libpng mingw-w64-x86_64-libtiff mingw-w64-x86_64-openjpeg
            mingw-w64-x86_64-python-pip mingw-w64-x86_64-python-numpy mingw-w64-x86_64-python-pytest mingw-w64-x86_64-python-setuptools mingw-w64-x86_64-python-lxml
      - name: Setup cache
        uses: actions/cache@v2
        id: cache
        with:
          path: ${{ github.workspace }}\.ccache
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.base_ref }}${{ github.ref_name }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-${{ github.base_ref }}
            ${{ runner.os }}-${{ env.cache-name }}
      - name: Configure ccache
        run: |
          echo CCACHE_BASEDIR=$PWD >> ${GITHUB_ENV}
          echo CCACHE_DIR=$PWD/.ccache >> ${GITHUB_ENV}
          echo CCACHE_MAXSIZE=250M >> ${GITHUB_ENV}
          ccache -z
        working-directory: ${{ github.workspace }}
      - name: populate JAVA_HOME
        run: |
          echo "JAVA_HOME=$JAVA_HOME_11_X64" >> ${GITHUB_ENV}
      - name: Install PROJ data
        run: |
          cd /mingw64/share/proj
          wget http://download.osgeo.org/proj/proj-datumgrid-1.8.tar.gz
          tar xvzf proj-datumgrid-1.8.tar.gz
      - name: Install python dependencies for autotest
        run: |
          python -m pip install pytest-env
      # Disable mySQL since C:/mysql/lib/mysqlclient.lib (unrelated to msys) is found, which causes linking issues
      # Set explicitly CMAKE_C|CXX_COMPILER otherwise C:/ProgramData/chocolatey/bin/gcc.exe would be used
      - name: Configure
        run: |
          cmake -S . -B build -G "${generator}" -Werror=dev \
            -DCMAKE_BUILD_TYPE=release \
            -DCMAKE_C_FLAGS=-Werror \
            -DCMAKE_CXX_FLAGS=-Werror \
            -DWERROR_DEV_FLAG=-Werror=dev \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_PREFIX_PATH=/mingw64 \
            -DCMAKE_INSTALL_PREFIX=$PWD/install-gdal \
            "-DCMAKE_UNITY_BUILD=${CMAKE_UNITY_BUILD}" \
            -DGDAL_USE_MYSQL:BOOL=OFF \
            -DBUILD_CSHARP_BINDINGS=ON
        working-directory: ${{ github.workspace }}
      - name: Build
        run: cmake --build build -j 3
        working-directory: ${{ github.workspace }}
      - name: test
        run: cmake --build build --target quicktest
        working-directory: ${{ github.workspace }}
      - name: test (with ctest)
        run: |
          ctest --test-dir $GITHUB_WORKSPACE/build -C Release -V -j 3
        env:
          SKIP_OGR_GMLAS_HUGE_PROCESSING_TIME: YES
          SKIP_OGR_GMLAS_HTTP_RELATED: YES
          SKIP_TIFF_JPEG12: YES
        working-directory: ${{ github.workspace }}
      - name: Install
        run: cmake --build build --target install -j 3
        working-directory: ${{ github.workspace }}
      - name: Test post-install usage (with pkg-config)
        run: ./autotest/postinstall/test_pkg-config.sh $PWD/install-gdal
        working-directory: ${{ github.workspace }}
      - name: ccache statistics
        run: ccache -s

  build-windows-conda:
    runs-on: windows-2022
    env:
        architecture: x64
        #generator: Visual Studio 17 2022
        generator: Ninja
        cache-name: cmake-msvc
    steps:
    # To avoid git clone to mess with the line endings of GDAL autotest data
    # files that look like text, but should be handled as binary content
    - name: Set git core.autocrlf to false
      run: |
        git config --global core.autocrlf false
    - name: Checkout GDAL
      uses: actions/checkout@v2
    - uses: ilammy/msvc-dev-cmd@v1
    - name: populate JAVA_HOME
      shell: pwsh
      run: |
        echo "JAVA_HOME=$env:JAVA_HOME_11_X64" >> %GITHUB_ENV%
    - uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: gdalenv
        python-version: 3.9
        channels: conda-forge
    - run: |
        cmake --version
    - name: Install dependency
      shell: bash -l {0}
      run: |
        conda install --yes --quiet --name gdalenv curl libiconv icu python=3.9 swig numpy pytest pytest-env zlib clcache lxml
        conda install --yes --quiet --name gdalenv -c conda-forge proj geos hdf4 hdf5 kealib \
            libnetcdf openjpeg poppler libtiff libpng xerces-c expat libxml2 kealib json-c \
            cfitsio freexl geotiff jpeg libpq libspatialite libwebp-base pcre pcre2 postgresql \
            sqlite tiledb zstd cryptopp cgal doxygen librttopo libkml openssl xz \
            openjdk ant qhull armadillo blas blas-devel libblas libcblas liblapack liblapacke blosc
        cd $CONDA_PREFIX/Library/share/proj
        curl http://download.osgeo.org/proj/proj-datumgrid-1.8.tar.gz > proj-datumgrid-1.8.tar.gz
        tar xvzf proj-datumgrid-1.8.tar.gz
        cd $OLDPWD
    - name: Setup cache
      uses: actions/cache@v2
      id: cache
      with:
          path: ${{ github.workspace }}\.clcache
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.base_ref }}${{ github.ref_name }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-${{ github.base_ref }}
            ${{ runner.os }}-${{ env.cache-name }}
    - name: Configure ccache (Part 1)
      shell: cmd
      run: |
          set CLCACHE_DIR=%CD%\.clcache
          echo CLCACHE_DIR=%CLCACHE_DIR%>> %GITHUB_ENV%
    - name: Configure ccache (Part 2)
      shell: bash -l {0}
      run: |
          ${CONDA_PREFIX}/Scripts/clcache -z
          ${CONDA_PREFIX}/Scripts/clcache -M 250000000
          ${CONDA_PREFIX}/Scripts/clcache -s
          # Otherwise cmake can find link.exe from Conda instead of MSVC
          rm /usr/bin/link
    - name: Configure
      shell: bash -l {0}
      # Disable MySQL because of "error LNK2038: mismatch detected for '_MSC_VER': value '1800' doesn't match value '1900' in ogrmysqldatasource.obj" and other errors
      # Disable LIBKML because of issue at linking time with kmlXXXX.lib being debug libraries
      # Note that the leading space in CMAKE_C/CXX_FLAGS=" /WX" is due to using Bash on Windows that would
      # otherwise interpret /bla has a file relative to the Bash root directory and would replace it by a path like c:\Program Files\git\WX
      # BUILD_JAVA_BINDINGS=OFF because we get "Error occurred during initialization of VM.   Corrupted ZIP library: C:\Miniconda\envs\gdalenv\Library\bin\zip.dll" when running java. Not reproducible on a standard VM
      run: |
        mkdir -p $GITHUB_WORKSPACE/build
        cmake -G "${generator}" -Werror=dev "-DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install-gdal" "-DUSE_CCACHE=ON" "-DCMAKE_PREFIX_PATH=${CONDA_PREFIX}" -DCMAKE_UNITY_BUILD=${CMAKE_UNITY_BUILD} -S "$GITHUB_WORKSPACE" -B "$GITHUB_WORKSPACE/build" -DLIBKML_BASE_LIBRARY:FILEPATH= -DGDAL_ENABLE_PLUGINS:BOOL=ON -DGDAL_ENABLE_PLUGINS_NO_DEPS:BOOL=ON -DGDAL_USE_PUBLICDECOMPWT:BOOL=ON -DPUBLICDECOMPWT_URL=https://github.com/rouault/PublicDecompWT -DBUILD_JAVA_BINDINGS=OFF -DBUILD_CSHARP_BINDINGS=ON -DGDAL_USE_MYSQL:BOOL=OFF -DCMAKE_C_FLAGS=" /WX" -DCMAKE_CXX_FLAGS=" /WX" -DWERROR_DEV_FLAG="-Werror=dev" -DCMAKE_BUILD_TYPE=Release
    - name: Build
      shell: bash -l {0}
      run: cmake --build $GITHUB_WORKSPACE/build --config Release -j 2
      env:
        GIT_LFS_SKIP_SMUDGE: 1 # for PublicDecompWT github repository clone
    - name: test
      shell: bash -l {0}
      run: |
        cmake --build $GITHUB_WORKSPACE/build --config Release --target quicktest
    - name: test (with ctest)
      shell: bash -l {0}
      run: |
        ctest --test-dir $GITHUB_WORKSPACE/build -C Release -V -j 3
      env:
        SKIP_OGR_GMLAS_HUGE_PROCESSING_TIME: YES
        SKIP_OGR_GMLAS_HTTP_RELATED: YES
        SKIP_GDAL_HTTP_SSL_VERIFYSTATUS: YES
    - name: Install
      shell: bash -l {0}
      run: |
        cmake --build $GITHUB_WORKSPACE/build --config Release --target install
        export PATH=$GITHUB_WORKSPACE/install-gdal/bin:$PATH
        gdalinfo --version
        python -VV
        PYTHONPATH=$GITHUB_WORKSPACE/install-gdal/lib/site-packages python -c "from osgeo import gdal;print(gdal.VersionInfo(None))"
    - name: clcache statistics
      shell: bash -l {0}
      run:
        ${CONDA_PREFIX}/Scripts/clcache -s
    - name: Show gdal.pc
      shell: bash -l {0}
      run: cat $GITHUB_WORKSPACE/build/gdal.pc

  build-windows-minimum:
    runs-on: windows-2022
    env:
        architecture: x64
        generator: Visual Studio 17 2022
    steps:
    # To avoid git clone to mess with the line endings of GDAL autotest data
    # files that look like text, but should be handled as binary content
    - name: Set git core.autocrlf to false
      run: |
        git config --global core.autocrlf false
    - name: Checkout GDAL
      uses: actions/checkout@v2
    - uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: gdalenv
        python-version: 3.9
        channels: conda-forge
    - run: |
        cmake --version
    - name: Install dependency
      shell: bash -l {0}
      run: |
        conda install --yes --quiet --name gdalenv -c conda-forge proj clcache
    - name: Configure
      shell: bash -l {0}
      run: |
        mkdir -p $GITHUB_WORKSPACE/build
        export CONDA_PREFIX_BACKUP=${CONDA_PREFIX}
        conda deactivate
        cmake -A ${architecture} -G "${generator}" -Werror=dev "-DCMAKE_C_COMPILER_LAUNCHER=clcache" "-DCMAKE_CXX_COMPILER_LAUNCHER=clcache" "-DPROJ_INCLUDE_DIR=${CONDA_PREFIX_BACKUP}/Library/include" "-DPROJ_LIBRARY=${CONDA_PREFIX_BACKUP}/Library/lib/proj.lib" -DCMAKE_UNITY_BUILD=${CMAKE_UNITY_BUILD} -S "$GITHUB_WORKSPACE" -B "$GITHUB_WORKSPACE/build" -DCMAKE_C_FLAGS=" /WX" -DCMAKE_CXX_FLAGS=" /WX" -DGDAL_USE_EXTERNAL_LIBS:BOOL=OFF -DWERROR_DEV_FLAG="-Werror=dev"
    - name: Build
      shell: bash -l {0}
      run: cmake --build $GITHUB_WORKSPACE/build --config RelWithDebInfo -j 2
    - name: Show gdal.pc
      shell: bash -l {0}
      run: cat $GITHUB_WORKSPACE/build/gdal.pc

  build-mac:
    runs-on: macOS-latest
    env:
      CMAKE_OPTIONS: -DCFITSIO_ROOT=/usr/local/opt/cfitsio  -DPoppler_ROOT=/usr/local/opt/poppler -DPROJ_ROOT=/usr/local/opt/proj -DLibXml2_ROOT=/usr/local/opt/libxml2 -DSPATIALITE_ROOT=/usr/local/opt/libspatialite -DPostgreSQL_ROOT=/usr/local/opt/libpq -DEXPAT_ROOT=/usr/local/opt/expat -DXercesC_ROOT=/usr/local/opt/xerces-c -DSQLite3_ROOT=/usr/local/opt/sqlite -DOpenSSL_ROOT=/usr/local/opt/openssl -DPNG_ROOT=/usr/local/opt/libpng -DJPEG_ROOT=/usr/local/opt/jpeg -DOpenJPEG_ROOT=/usr/local/opt/openjpeg -DCURL_ROOT=/usr/local/opt/curl -DGDAL_USE_DAP=OFF
      cache-name: cmake-macos
    steps:
    - name: Setup xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 12.4
    - name: Checkout GDAL
      uses: actions/checkout@v2
    - name: Setup cache
      uses: actions/cache@v2
      id: cache
      with:
          path: ${{ github.workspace }}/.ccache
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.base_ref }}${{ github.ref_name }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-${{ github.base_ref }}
            ${{ runner.os }}-${{ env.cache-name }}
    - run: |
        cmake --version
    - name: Install dependency
      run: |
        brew update
        brew outdated
        brew install postgresql || brew link postgresql
        brew install freexl libxml2 libspatialite geos proj libgeotiff openjpeg giflib libaec postgis poppler doxygen unixodbc
        brew install ccache swig
        # gdal is automatically installed as a dependency for postgis
        brew uninstall --ignore-dependencies gdal
        cd /usr/local/opt/proj/share/proj
        curl http://download.osgeo.org/proj/proj-datumgrid-1.8.tar.gz > proj-datumgrid-1.8.tar.gz
        tar xvzf proj-datumgrid-1.8.tar.gz
        cd $OLDPWD
        python3 -m pip install -r $GITHUB_WORKSPACE/autotest/requirements.txt
    - name: Configure ccache
      run: |
          echo CCACHE_BASEDIR=$PWD >> ${GITHUB_ENV}
          echo CCACHE_DIR=$PWD/.ccache >> ${GITHUB_ENV}
          echo CCACHE_MAXSIZE=250M >> ${GITHUB_ENV}
          ccache -z
      working-directory: ${{ github.workspace }}
    - name: Configure
      run: |
        mkdir -p $GITHUB_WORKSPACE/build
        cmake -Werror=dev -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install-gdal ${CMAKE_OPTIONS} -DCMAKE_C_FLAGS=-Werror -DCMAKE_CXX_FLAGS=-Werror -DUSE_CCACHE=ON -DCMAKE_UNITY_BUILD=${CMAKE_UNITY_BUILD} -S "$GITHUB_WORKSPACE" -B "$GITHUB_WORKSPACE/build" -DWERROR_DEV_FLAG="-Werror=dev"
    - name: Build
      run: |
        cmake --build $GITHUB_WORKSPACE/build -j 3
        otool -L $GITHUB_WORKSPACE/build/libgdal.dylib
    - name: test
      run: cmake --build $GITHUB_WORKSPACE/build --target quicktest
    - name: test (with ctest)
      run: |
        ctest --test-dir $GITHUB_WORKSPACE/build -V -j 3
      env:
        GITHUB_WORKFLOW: "MacOS build"
    - name: Install
      run: cmake --build $GITHUB_WORKSPACE/build --target install -j 3
    - name: Test post-install usage (with pkg-config)
      run: |
        ./autotest/postinstall/test_pkg-config.sh $GITHUB_WORKSPACE/install-gdal
    - name: Test post-install usage (with gdal-config)
      run: |
        ./autotest/postinstall/test_gdal-config.sh $GITHUB_WORKSPACE/install-gdal
    - name: Test post-install usage (with CMake)
      run: |
        ./autotest/postinstall/test_cmake.sh $GITHUB_WORKSPACE/install-gdal
    - name: ccache statistics
      run: ccache -s

  # Disabled for now since bindings in master use GDALDatasetGetFieldDomainNames
  # but libgdal from Conda has not it yet.
  build-windows-conda-csharp-only:
    if: ${{ false }}  # disable for now
    runs-on: windows-2022
    env:
        architecture: x64
        generator: Visual Studio 17 2022

    steps:
    # To avoid git clone to mess with the line endings of GDAL autotest data
    # files that look like text, but should be handled as binary content
    - name: Set git core.autocrlf to false
      run: |
        git config --global core.autocrlf false
    - name: Checkout GDAL
      uses: actions/checkout@v2
    - uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: gdalenv
        python-version: 3.9
        channels: conda-forge
    - name: Install dependency
      shell: bash -l {0}
      run: |
        conda install --yes --quiet --name gdalenv curl libiconv icu python=3.9 swig numpy pytest pytest-env zlib clcache lxml
        conda install --yes --quiet --name gdalenv -c conda-forge libgdal
    - name: Configure
      shell: bash -l {0}
      run: |
        mkdir -p $GITHUB_WORKSPACE/build
        cmake -A ${architecture} -G "${generator}" -DGDAL_CSHARP_ONLY=ON -DCMAKE_C_FLAGS=" /WX" -DCMAKE_CXX_FLAGS=" /WX" -S "$GITHUB_WORKSPACE" -B "$GITHUB_WORKSPACE/build"
    - name: Build
      shell: bash -l {0}
      run: cmake --build $GITHUB_WORKSPACE/build --config Release --target csharp_samples -j 2
    - name: test (with ctest)
      shell: bash -l {0}
      run: |
        ctest --test-dir $GITHUB_WORKSPACE/build -C Release -V -j 3 -R "^csharp.*"
      env:
        SKIP_OGR_GMLAS_HUGE_PROCESSING_TIME: YES
