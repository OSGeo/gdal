use strict;
use warnings;
use File::Basename;
use ExtUtils::MakeMaker;
use Config;
use Cwd;

my $source_tree = '@CMAKE_SOURCE_DIR@/gdal';
my $build_tree = '@CMAKE_BINARY_DIR@/gdal';
my $wrap_dir = '@GDAL_PERL_WRAP_OBJ_DIR@';
my $config = "@CMAKE_BINARY_DIR@/apps/gdal-config";
push @ARGV, "INSTALLSITEMAN1DIR=@INSTALL_PREFIX@/@INSTALL_BASE@/man1";
push @ARGV, "INSTALLSITEMAN3DIR=@INSTALL_PREFIX@/@INSTALL_BASE@/man3";

my ($INC, $LIB, $objects) = get_config($config);

for my $module (sort keys %$objects) {
    my $add = $module;
    $add =~ s/:/_/g;
    my $LD = $Config{ld};
    $LD .= ' '.$ENV{CFLAGS} if $ENV{CFLAGS};
    $LD .= ' '.$ENV{LDFLAGS} if $ENV{LDFLAGS};
    my $OPTIMIZE = '';
    $OPTIMIZE .= ' '.$ENV{CFLAGS} if $ENV{CFLAGS};
    $OPTIMIZE .= ' '.$ENV{CPPFLAGS} if $ENV{CFLAGS};

    my %PM = ( 'lib/Geo/GDAL.pm' => '$(INST_LIBDIR)/GDAL.pm',
               'lib/Geo/OGR.pm' => '$(INST_LIBDIR)/OGR.pm',
               'lib/Geo/OSR.pm' => '$(INST_LIBDIR)/OSR.pm',
               'lib/Geo/Const.pm' => '$(INST_LIBDIR)/GDAL/Const.pm' );

    $PM{'lib/Geo/GNM.pm'} = '$(INST_LIBDIR)/GNM.pm' if $objects->{'Geo::GNM'};

    WriteMakefile( NAME => $module,
                   VERSION_FROM => 'lib/Geo/GDAL.pm',
                   ABSTRACT => 'Perl extension for the GDAL library for geospatial data',
                   AUTHOR => 'Ari Jolma <ari.jolma at gmail.com>',
                   MAKEFILE => 'Makefile_'.$add,
                   LIBS => $LIB,
                   INC => $INC,
                   OPTIMIZE => $OPTIMIZE,
                   LD => $LD,
                   OBJECT => $objects->{$module},
                   PM => \%PM );
}

sub get_config {
    my $config = shift;
    my $INC = "-I$source_tree ";
    my $LIB = "-L$build_tree -lgdal ";
    #my $objects = {
    #    'Geo::GDAL' => 'gdal_wrap.o',
    #    'Geo::OGR' => 'ogr_wrap.o',
    #    'Geo::GDAL::Const' => 'gdalconst_wrap.o',
    #    'Geo::OSR' => 'osr_wrap.o' };
    # FIXME: hack here to compile by cmake
    my $objects = {
        'Geo::GDAL' => "$wrap_dir/gdal_wrap.cpp.o",
        'Geo::OGR' => "$wrap_dir/ogr_wrap.cpp.o",
        'Geo::GDAL::Const' => "$wrap_dir/gdalconst_wrap.c.o",
        'Geo::OSR' => "$wrap_dir/osr_wrap.cpp.o" };
    if (open(my $fh, $config) || die "Can't open '$config': $!") {
        for (<$fh>) {
            if (/^CONFIG_LIBS/) {
                s/^CONFIG_LIBS="//;
                s/"\s*$//;
                if ($_ =~ /\.la$/) {
                    $LIB .= parse_libtool_library_file_for_l($_);
                } else {
                    $LIB .= $_;
                }
                $LIB .= ' ';
            }
            if (/^CONFIG_DEP_LIBS/) {
                s/^CONFIG_DEP_LIBS="//;
                s/"\s*$//;
                $LIB .= $_;
            }
            if (/^CONFIG_CFLAGS/) {
                s/^CONFIG_CFLAGS="//;
                s/"\s*$//;
                $INC .= $_;
            }
            if (/CONFIG_GNM_ENABLED/ and /yes/) {
                $objects->{'Geo::GNM'} = "$wrap_dir/gnm_wrap.cpp.o";
                $INC .= " -I$source_tree/gnm ";
            }
        }
        close $fh;
    }
    return ($INC, $LIB, $objects);
}

sub parse_libtool_library_file_for_l {
    my $fn = shift;
    my $fh;
    my $l = '';
    if (open($fh, $fn)) {
        while (<$fh>) {
            if (/^dlname=(.*)/) {
                $l = $1;
                $l =~ s/^'//;
                $l =~ s/^lib/\-l/;
                $l =~ s/\..*$//;
                last;
            }
        }
        close $fh;
    }
    return $l;
}
