platform:
- x64
- x86

shallow_clone: true

install:
- if "%platform%" == "x86" SET PATH=c:\python27;%PATH%
- if "%platform%" == "x64" SET PATH=c:\Python27-x64;%PATH%
- if "%platform%" == "x86" call "%VS120COMNTOOLS%\..\..\VC\vcvarsall.bat"
- if "%platform%" == "x64" "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64
- if "%platform%" == "x64" call "%VS120COMNTOOLS%\..\..\VC\vcvarsall.bat" x86_amd64
- if "%platform%" == "x64" set WIN64_ARG="WIN64=YES"
- if "%platform%" == "x86" SET SDK=release-1800
- if "%platform%" == "x64" SET SDK=release-1800-x64
- set SDK_ZIP=%SDK%-dev.zip
- set SDK_URL=http://download.gisinternals.com/sdk/downloads/%SDK_ZIP%
- echo "%SDK_ZIP%"
- echo "%SDK_URL%"
- mkdir sdk
- cd sdk
- appveyor DownloadFile "%SDK_URL%"
- 7z x "%SDK_ZIP%" > nul
- cd ..
- set SDK_PREFIX=%CD%\sdk\%SDK%
- set SDK_INC=%CD%\sdk\%SDK%\include
- set SDK_LIB=%CD%\sdk\%SDK%\lib
- set SDK_BIN=%CD%\sdk\%SDK%\bin
- copy %SDK_INC%\hdf4\*.h %SDK_INC%
#- ps: Start-FileDownload http://download.osgeo.org/proj/proj-4.9.1.tar.gz
#- 7z x proj-4.9.1.tar.gz
#- 7z x proj-4.9.1.tar
#- cd proj-4.9.1
#- nmake /f makefile.vc
#- nmake /f makefile.vc install-all
#- cd ..
- cd gdal
- echo GEOS_CFLAGS=-I$(SDK_INC) -DHAVE_GEOS > nmake.local
- echo GEOS_LIB=$(SDK_LIB)\geos_c.lib >> nmake.local
- echo PG_INC_DIR = $(SDK_INC) >> nmake.local
- echo PG_LIB = $(SDK_LIB)\libpqdll.lib wsock32.lib >> nmake.local
- echo CURL_DIR=bla >> nmake.local
- echo CURL_INC = -I$(SDK_INC) >> nmake.local
- echo CURL_LIB = $(SDK_LIB)\libcurl_imp.lib wsock32.lib wldap32.lib winmm.lib >> nmake.local
- echo SQLITE_INC=-I$(SDK_INC) -DHAVE_SPATIALITE -DSPATIALITE_AMALGAMATION >> nmake.local
- echo SQLITE_LIB=$(SDK_LIB)\spatialite_i.lib $(SDK_LIB)\sqlite3_i.lib >> nmake.local
- echo KMLSUPEROVERLAY_SUPPORTED = YES >> nmake.local
- echo MINIZIP_INCLUDE = -I$(SDK_INC) >> nmake.local
- echo MINIZIP_LIBRARY = $(SDK_LIB)\minizip.lib >> nmake.local
- echo MYSQL_INC_DIR=$(SDK_INC) >> nmake.local
- echo MYSQL_LIB=$(SDK_LIB)\libmysql.lib advapi32.lib >> nmake.local
- echo XERCES_DIR=bla >> nmake.local
- echo XERCES_INCLUDE=-I$(SDK_INC) -I$(SDK_INC)\xercesc >> nmake.local
- echo XERCES_LIB=$(SDK_LIB)\xerces-c_3.lib >> nmake.local
- echo ILI_ENABLED = YES >> nmake.local
- echo EXPAT_DIR=bla >> nmake.local
- echo EXPAT_INCLUDE=-I$(SDK_INC) >> nmake.local
- echo EXPAT_LIB=$(SDK_LIB)\expat.lib >> nmake.local
- echo LIBKML_DIR=bla >> nmake.local
- echo LIBKML_INCLUDE=-I$(SDK_INC) >> nmake.local
- echo LIBKML_LIBS=$(SDK_LIB)\libkmlbase.lib $(SDK_LIB)\libkmlconvenience.lib $(SDK_LIB)\libkmldom.lib $(SDK_LIB)\libkmlengine.lib $(SDK_LIB)\libkmlregionator.lib $(SDK_LIB)\libkmlxsd.lib $(SDK_LIB)\expat.lib $(SDK_LIB)\zdll.lib >> nmake.local
- echo POPPLER_ENABLED = YES >> nmake.local
- echo POPPLER_CFLAGS = -I$(SDK_INC) -I$(SDK_INC)\poppler >> nmake.local
- echo POPPLER_HAS_OPTCONTENT = YES >> nmake.local
- echo POPPLER_0_20_OR_LATER = YES >> nmake.local
- echo POPPLER_0_23_OR_LATER = YES >> nmake.local
- echo POPPLER_BASE_STREAM_HAS_TWO_ARGS = YES >> nmake.local
- echo POPPLER_LIBS = $(SDK_LIB)\poppler.lib $(SDK_LIB)\freetype2411.lib advapi32.lib gdi32.lib >> nmake.local
- echo OPENJPEG_ENABLED = YES >> nmake.local
- echo OPENJPEG_CFLAGS = -I$(SDK_INC) >> nmake.local
- echo OPENJPEG_LIB = $(SDK_LIB)\openjp2.lib >> nmake.local
- echo OPENJPEG_VERSION = 20100 >> nmake.local
- echo ECWDIR=bla >> nmake.local
- echo ECWLIB=$(SDK_LIB)\libecwj2.lib >> nmake.local
- echo ECWFLAGS=-DECWSDK_VERSION=33 -I$(SDK_INC) /D_MBCS /D_UNICODE /DUNICODE /D_WINDOWS  /DLIBECWJ2 /DWIN32 /D_WINDLL -DNO_X86_MMI >> nmake.local
#- echo LIBICONV_DIR = bla >> nmake.local
#- echo LIBICONV_INCLUDE = -I$(SDK_INC) >> nmake.local
#- echo LIBICONV_LIBRARY = $(SDK_LIB)\iconv.lib >> nmake.local
#- echo LIBICONV_CFLAGS = -DICONV_CONST=const >> nmake.local
#- echo HDF4_DIR = $(SDK_PREFIX) >> nmake.local
#- echo HDF4_LIB = $(SDK_LIB)\hdfdll.lib $(SDK_LIB)\mfhdfdll.lib Ws2_32.lib >> nmake.local
- echo HDF5_DIR = $(SDK_PREFIX) >> nmake.local
- echo HDF5_LIB = $(SDK_LIB)\hdf5.lib  >> nmake.local
- echo KEA_CFLAGS = -I$(SDK_INC) >> nmake.local
- echo KEA_LIB = $(SDK_LIB)\libkea.lib >> nmake.local
- echo NETCDF_SETTING=yes >> nmake.local
- echo NETCDF_LIB=$(SDK_LIB)\netcdf.lib >> nmake.local
- echo NETCDF_INC_DIR=$(SDK_INC) >> nmake.local
- echo NETCDF_HAS_NC4 = yes >> nmake.local
- nmake /f makefile.vc MSVC_VER=1800 DEBUG=1 %WIN64_ARG% USER_DEFS=/WX
- cd apps
- nmake /f makefile.vc test_ogrsf.exe MSVC_VER=1800 DEBUG=1 %WIN64_ARG% USER_DEFS=/WX
- cd ..
- cd swig\python
- python setup.py build
- python setup.py install
- cd ..\..
- cd ..\autotest\cpp
- nmake /f makefile.vc MSVC_VER=1800 %WIN64_ARG%
- cd ..\..


build_script:
  - echo build_script

test_script:
  - echo test_script
  - set SDK_PREFIX=%CD%\sdk\%SDK%
  - set SDK_BIN=%CD%\sdk\%SDK%\bin
  - SET PATH=%CD%\gdal;%CD%\gdal\apps;%SDK_BIN%;%PATH%
  - SET GDAL_DATA=%CD%\gdal\data
  - SET PROJ_LIB=%SDK_BIN%\proj\SHARE
  - cd autotest
  - cd cpp
  - SET DO_NOT_FAIL_ON_RECODE_ERRORS=YES
  - nmake /f makefile.vc check MSVC_VER=1800 %WIN64_ARG%
  - cd ..
  - python run_all.py

deploy: off

