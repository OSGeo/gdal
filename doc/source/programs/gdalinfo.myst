---
jupytext:
  formats: md:myst
  text_representation:
    extension: .md
    format_name: myst
kernelspec:
  display_name: Python 3
  language: python
  name: python3
mystnb:
  merge_streams: True
---
(gdalinfo)=

# gdalinfo

```{eval-rst}
.. only:: html

    Lists information about a raster dataset.
```

```{Index} gdalinfo
```

## Synopsis

```
gdalinfo [--help] [--help-general]
         [-json] [-mm] [-stats | -approx_stats] [-hist]
         [-nogcp] [-nomd] [-norat] [-noct] [-nofl] [-nonodata] [-nomask]
         [-checksum] [-listmdd] [-mdd <domain>|all]
         [-proj4] [-wkt_format {WKT1|WKT2|<other_format>}]...
         [-sd <subdataset>] [-oo <NAME>=<VALUE>]... [-if <format>]...
         <datasetname>
```

## Description

{program}`gdalinfo` program lists various information about a GDAL supported
raster dataset.

The following command line parameters can appear in any order

```{eval-rst}
.. program:: gdalinfo
```

```{eval-rst}
.. include:: options/help_and_help_general.rst
```

```{eval-rst}
.. option:: -json

    Display the output in json format. Since GDAL 3.6, this includes key-value
    pairs useful for building a `STAC item
    <https://github.com/radiantearth/stac-spec/blob/v1.0.0/item-spec/item-spec.md>`_
    , including statistics and histograms if ``-stats`` or ``-hist`` flags are
    passed, respectively.
```

```{eval-rst}
.. option:: -mm

    Force computation of the actual min/max values for each band in the
    dataset.
```

```{eval-rst}
.. option:: -stats

    Read and display image statistics. Force computation if no
    statistics are stored in an image.
```

```{eval-rst}
.. option:: -approx_stats

    Read and display image statistics. Force computation if no
    statistics are stored in an image. However, they may be computed
    based on overviews or a subset of all tiles. Useful if you are in a
    hurry and don't want precise stats.
```

```{eval-rst}
.. option:: -hist

    Report histogram information for all bands.
```

```{eval-rst}
.. option:: -nogcp

    Suppress ground control points list printing. It may be useful for
    datasets with huge amount of GCPs, such as L1B AVHRR or HDF4 MODIS
    which contain thousands of them.
```

```{eval-rst}
.. option:: -nomd

    Suppress metadata printing. Some datasets may contain a lot of
    metadata strings.
```

```{eval-rst}
.. option:: -norat

    Suppress printing of raster attribute table.
```

```{eval-rst}
.. option:: -noct

    Suppress printing of color table.
```

```{eval-rst}
.. option:: -nonodata

    .. versionadded:: 3.10

    Suppress nodata printing. Implies :option:`-nomask`.

    Can be useful for example when querying a remove GRIB2 dataset that has an
    index .idx side-car file, together with :option:`-nomd`
```

```{eval-rst}
.. option:: -nomask

    .. versionadded:: 3.10

    Suppress band mask printing. Is implied if :option:`-nonodata` is specified.
```

```{eval-rst}
.. option:: -checksum

    Force computation of the checksum for each band in the dataset.
```

```{eval-rst}
.. option:: -listmdd

    List all metadata domains available for the dataset.
```

```{eval-rst}
.. option:: -mdd <domain>|all

    adds metadata using:

    ``domain`` Report metadata for the specified domain.

    ``all`` Report metadata for all domains.
```

```{eval-rst}
.. option:: -nofl

    Only display the first file of the file list.
```

```{eval-rst}
.. option:: -wkt_format WKT1|WKT2|WKT2_2015|WKT2_2018|WKT2_2019

    WKT format used to display the SRS.
    Currently the supported values are:

    ``WKT1``

    ``WKT2`` (latest WKT version, currently *WKT2_2019*)

    ``WKT2_2015``

    ``WKT2_2018`` (deprecated)

    ``WKT2_2019``

    .. versionadded:: 3.0.0
```

```{eval-rst}
.. option:: -sd <n>

    If the input dataset contains several subdatasets read and display
    a subdataset with specified ``n`` number (starting from 1).
    This is an alternative of giving the full subdataset name.
```

```{eval-rst}
.. option:: -proj4

    Report a PROJ.4 string corresponding to the file's coordinate system.
```

```{eval-rst}
.. option:: -oo <NAME>=<VALUE>

    Dataset open option (format specific).
```

```{eval-rst}
.. include:: options/if.rst

```

The gdalinfo will report all of the following (if known):

- The format driver used to access the file.
- Raster size (in pixels and lines).
- The coordinate system for the file (in OGC WKT).
- The geotransform associated with the file (rotational coefficients
  are currently not reported).
- Corner coordinates in georeferenced, and if possible lat/long based
  on the full geotransform (but not GCPs).
- Ground control points.
- File wide (including subdatasets) metadata.
- Band data types.
- Band color interpretations.
- Band block size.
- Band descriptions.
- Band min/max values (internally known and possibly computed).
- Band checksum (if computation asked).
- Band NODATA value.
- Band overview resolutions available.
- Band unit type (i.e.. "meters" or "feet" for elevation bands).
- Band pseudo-color tables.

## C API

This utility is also callable from C with {cpp:func}`GDALInfo`.

```{eval-rst}
.. versionadded:: 2.1
```

## Examples

* Text output with `gdalinfo ../../../autotest/gcore/data/utmsmall.tif`:

```{code-cell}
:tags: [remove-input]

!gdalinfo ../../../autotest/gcore/data/utmsmall.tif
```

* For corner coordinates formatted as decimal degree instead of the above degree, minute, second, inspect the `wgs84Extent` member of gdalinfo -json:

Example of JSON output with `gdalinfo -json ../../../autotest/gcore/data/utmsmall.tif`

```{code-cell}
:tags: [remove-input]
:mystnb:
:  text_lexer: json

!gdalinfo -json ../../../autotest/gcore/data/utmsmall.tif
```
