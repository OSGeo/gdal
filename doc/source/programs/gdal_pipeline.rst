.. _gdal_pipeline:

================================================================================
``gdal pipeline``
================================================================================

.. versionadded:: 3.12

.. only:: html

    Process a dataset applying several steps.

.. Index:: gdal pipeline

Description
-----------

:program:`gdal pipeline` execute a pipeline, taking a raster or input dataset,
execute steps and finally writing a raster or vector dataset.

Synopsis
--------

.. program-output:: gdal pipeline --help-doc=main

A pipeline chains several steps, separated with the `!` (exclamation mark) character.
The first step must be ``read``, ``calc``, ``concat``, ``mosaic`` or ``stack``,
and the last one ``info``, ``tile`` or ``write``.
Each step has its own positional or non-positional arguments.
Apart from ``read``, ``calc``, ``concat``, ``mosaic``, ``stack``, ``info``, ``tile`` and ``write``,
all other steps can potentially be used several times in a pipeline.

For steps that have both *raster* data type as input and output, consult :ref:`gdal_raster_pipeline`.
For steps that have both *vector* data type as input and output, consult :ref:`gdal_vector_pipeline`.

The following steps accept raster input and generate vector output:

* contour

.. program-output:: gdal pipeline --help-doc=contour

Details for options can be found in :ref:`gdal_raster_contour`.

* footprint

.. program-output:: gdal pipeline --help-doc=footprint

Details for options can be found in :ref:`gdal_raster_footprint`.

* polygonize

.. program-output:: gdal pipeline --help-doc=polygonize

Details for options can be found in :ref:`gdal_raster_polygonize`.

The following steps accept raster vector and generate raster output:

* grid

.. program-output:: gdal pipeline --help-doc=grid

Details for options can be found in :ref:`gdal_vector_grid`.

* rasterize

.. program-output:: gdal pipeline --help-doc=rasterize

Details for options can be found in :ref:`gdal_vector_rasterize`.

GDALG output (on-the-fly / streamed dataset)
--------------------------------------------

A pipeline can be serialized as a JSON file using the ``GDALG`` output format.
The resulting file can then be opened as a dataset using the
:ref:`raster.gdalg` or :ref:`vector.gdalg` driver, and apply the specified pipeline in a on-the-fly /
streamed way.

The ``command_line`` member of the JSON file should nominally be the whole command
line without the final ``write`` step, and is what is generated by
``gdal pipeline ! .... ! write out.gdalg.json``.

.. code-block:: json

    {
        "type": "gdal_streamed_alg",
        "command_line": "gdal pipeline ! read in.tif ! footprint ! buffer 20"
    }

The final ``write`` step can be added but if so it must explicitly specify the
``stream`` output format and a non-significant output dataset name.

.. code-block:: json

    {
        "type": "gdal_streamed_alg",
        "command_line": "gdal pipeline ! read in.tif ! footprint ! buffer 20 ! write --output-format=streamed streamed_dataset"
    }

.. _gdal_pipeline_substitutions:

Substitutions
-------------

It is also possible to use :program:`gdal pipeline` to use a pipeline already
serialized in a ``.gdalg.json`` file, and customize its existing steps, typically
changing an input filename, specifying an output filename, or adding/modifying arguments
of steps.

The syntax is:

::

    gdal pipeline <filename.gdalg.json> --<step-name>.<arg-name>=value


When specifying an existing argument of a step of a pipeline, the value from the
pipeline is overridden by the one specified on the :program:`gdal pipeline` command line.

Let's imagine we have a :file:`raster_reproject.gdalg.json` with the following content:

.. code-block:: json

    {
        "type": "gdal_streamed_alg",
        "command_line": "gdal pipeline ! read in.tif ! reproject --dst-crs=EPSG:4326 ! edit --metadata=CHANGES=reprojected"
    }

It is possible to run it with the following command line, overriding the
``input`` argument of the ``read`` step, and implicitly adding a final ``write``
step with an ``output`` argument.

.. code-block:: bash

    $ gdal pipeline raster_reproject.gdalg.json --read.input=other_input.tif --write.output=out.tif


When there is no ambiguity, it is also possible to omit the step name, and just
specify the argument name (if there is an ambiguity, :program:`gdal pipeline`
will emit an error, so this is safe to do):

.. code-block:: bash

    $ gdal pipeline raster_reproject.gdalg.json --input=other_input.tif --output=out.tif --co COMPRESS=LZW --overwrite


When a step appears several times in the pipeline, it must specified as
``<step-name>[<idx>]``, where ``<idx>`` is a zero-based index.

For example, given:

.. code-block:: json

    {
        "type": "gdal_streamed_alg",
        "command_line": "gdal pipeline ! read in.tif ! edit --metadata=before=value ! reproject --dst-crs=EPSG:4326 ! edit --metadata=CHANGES=reprojected"
    }

the following command line may be used:

.. code-block:: bash

    $ gdal pipeline raster_reproject.gdalg.json --edit[0].metadata=before=modified --output=out.tif


Execution of pipelines and argument substitutions can also be done in Python with:

.. code-block:: python

    gdal.Run("pipeline", pipeline="raster_reproject.gdalg.json", output="out.tif", arguments={"edit[0].metadata": "before=modified"})

Examples
--------

.. example::
   :title: Compute the footprint of a raster and apply a buffer on the footprint

   .. code-block:: bash

        $ gdal pipeline ! read in.tif ! footprint ! buffer 20 ! write out.gpkg --overwrite

.. example::
   :title: Rasterize and reproject

   .. code-block:: bash

        $ gdal pipeline ! read in.gpkg ! rasterize --size 1000,1000 ! reproject --dst-crs EPSG:4326 ! write out.tif --overwrite

.. example::
   :title: Use an existing pipeline that rasterizes and reprojects, but change its input file and target CRS, and specify the output file

   .. code-block:: bash

        $ gdal pipeline raster_reproject.gdalg.json --input=my.gpkg --output=out.tif --dst-crs=EPSG:32631
