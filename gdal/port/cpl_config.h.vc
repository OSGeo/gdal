#ifndef CPL_CONFIG_H
#define CPL_CONFIG_H

/* We define this here in general so that a VC++ build will publicly
   declare STDCALL interfaces even if an application is built against it
   using MinGW */

#ifndef CPL_DISABLE_STDCALL
#  define CPL_STDCALL __stdcall
#endif

/* Define if you don't have vprintf but do have _doprnt.  */
#undef HAVE_DOPRNT

/* Define if you have the vprintf function.  */
#ifndef HAVE_VPRINTF
  #define HAVE_VPRINTF 1
#endif
#ifndef HAVE_VSNPRINTF
  #define HAVE_VSNPRINTF 1
#endif
#ifndef HAVE_SNPRINTF
  #define HAVE_SNPRINTF 1
#endif
#ifdef GDAL_COMPILATION

#if defined(_MSC_VER) && (_MSC_VER < 1900)

#include <stdio.h>
#include <stdarg.h>
#include <assert.h>

/* Before VS 2015, _snprintf / _vsnprintf are not guaranteed to NUL terminate the */
/* buffer. So do that. But we sill preserve the non-C99 compliance of returning */
/* potentially a negative value. */
__inline int CPL_safer_vsnprintf(char *str, size_t size, const char *format, va_list ap)
{
    int ret = _vsnprintf(str, size, format, ap);
    /* CPLsprintf() call CPLvsnprintf() with a fake size of INT_MAX, and */
    /* later may substract offset. So basically do not do anything if */
    /* the buffer is bigger than INT_MAX/2 */
    if(size > 0 && size < 0x3FFFFFFF)
        str[size-1] = '\0';
    return ret;
}

__inline int CPL_safer_snprintf(char* str, size_t size, const char* format, ...)
{
    int ret;
    va_list args;
    va_start(args, format);
    ret = CPL_safer_vsnprintf(str, size, format, args);
    va_end(args);
    return ret;
}

#define HAVE_CPL_SAFER_SNPRINTF
#ifdef snprintf
#undef snprintf
#endif
#ifdef vsnprintf
#undef vsnprintf
#endif
#define snprintf CPL_safer_snprintf
#define vsnprintf CPL_safer_vsnprintf

#endif /* defined(_MSC_VER) && (_MSC_VER < 1900) */

#else /* GDAL_COMPILATION */

#if defined(_MSC_VER) && (_MSC_VER < 1500)
#  define vsnprintf _vsnprintf
#endif
#if defined(_MSC_VER) && (_MSC_VER < 1900)
#  define snprintf _snprintf
#endif

#endif /* GDAL_COMPILATION */

#define HAVE_GETCWD 1
/* gmt_notunix.h from GMT project also redefines getcwd. See #3138 */
#ifndef getcwd
#define getcwd _getcwd
#endif

/* Define if you have the ANSI C header files.  */
#ifndef STDC_HEADERS
#  define STDC_HEADERS 1
#endif

/* Define to 1 if you have the <assert.h> header file. */
#define HAVE_ASSERT_H 1

/* Define to 1 if you have the <fcntl.h> header file.  */
#define HAVE_FCNTL_H 1

/* Define if you have the <unistd.h> header file.  */
#undef HAVE_UNISTD_H

/* Define if you have the <stdint.h> header file.  */
#undef HAVE_STDINT_H

/* Define to 1 if you have the <sys/types.h> header file. */
#define HAVE_SYS_TYPES_H 1

#undef HAVE_LIBDL

/* Define to 1 if you have the <locale.h> header file. */
#define HAVE_LOCALE_H 1

#define HAVE_FLOAT_H 1

#define HAVE_ERRNO_H 1

#define HAVE_SEARCH_H 1

/* Define to 1 if you have the <direct.h> header file. */
#ifndef HAVE_DIRECT_H
  #define HAVE_DIRECT_H 1
#endif

/* Define to 1 if you have the `localtime_r' function. */
#undef HAVE_LOCALTIME_R

#undef HAVE_DLFCN_H
#undef HAVE_DBMALLOC_H
#undef HAVE_LIBDBMALLOC
#undef WORDS_BIGENDIAN

/* The size of a `int', as computed by sizeof. */
#define SIZEOF_INT 4

/* The size of a `long', as computed by sizeof. */
#define SIZEOF_LONG 4

/* The size of a `unsigned long', as computed by sizeof. */
#define SIZEOF_UNSIGNED_LONG 4

/* The size of `void*', as computed by sizeof. */
#ifdef _WIN64
# define SIZEOF_VOIDP 8
#else
# define SIZEOF_VOIDP 4
#endif

/* Set the native cpu bit order */
#define HOST_FILLORDER FILLORDER_LSB2MSB

/* Define as 0 or 1 according to the floating point format supported by the
   machine */
#define HAVE_IEEEFP 1

/* Define to `__inline__' or `__inline' if that's what the C compiler
   calls it, or to nothing if 'inline' is not supported under any name.  */
#ifndef __cplusplus
#  ifndef inline
#    define inline __inline
#  endif
#endif

#define lfind _lfind

#if defined(_MSC_VER) && (_MSC_VER < 1310)
#  define VSI_STAT64 _stat
#  define VSI_STAT64_T _stat
#else
#  define VSI_STAT64 _stat64
#  define VSI_STAT64_T __stat64
#endif

/* VC6 doesn't known intptr_t */
#if defined(_MSC_VER) && (_MSC_VER <= 1200)
    typedef int intptr_t;
#endif

#pragma warning(disable: 4786)

/* #define CPL_DISABLE_DLL */

#endif /* CPL_CONFIG_H */
