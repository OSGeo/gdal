#
# CPL (Common Portability Library) makefile for MSVC
#

OBJ	=	cpl_conv.obj \
		cpl_error.obj \
		cpl_string.obj \
		cplstring.obj \
		cplstringlist.obj \
		cpl_strtod.obj \
		cpl_vsisimple.obj \
		cplgetsymbol.obj \
		cpl_path.obj \
		cpl_csv.obj \
		cpl_findfile.obj \
		cpl_vsil_win32.obj \
		cpl_minixml.obj \
		cpl_multiproc.obj \
		cpl_list.obj \
		cpl_getexecpath.obj \
		cpl_vsil.obj \
		cpl_vsi_mem.obj \
		cpl_http.obj \
		cpl_hash_set.obj \
		cplkeywordparser.obj \
		cpl_recode.obj \
		cpl_recode_iconv.obj \
		cpl_recode_stub.obj \
		cpl_quad_tree.obj \
		cpl_vsil_gzip.obj \
		cpl_minizip_ioapi.obj \
		cpl_minizip_unzip.obj \
		cpl_minizip_zip.obj \
		cpl_vsil_subfile.obj \
		cpl_atomic_ops.obj \
		cpl_time.obj \
		cpl_vsil_stdout.obj \
		cpl_vsil_sparsefile.obj \
		cpl_vsil_abstract_archive.obj \
		cpl_vsil_tar.obj \
		cpl_vsil_curl.obj \
		cpl_vsil_s3.obj \
		cpl_vsil_gs.obj \
		cpl_vsil_az.obj \
		cpl_vsil_oss.obj \
		cpl_vsil_plugin.obj \
		cpl_vsil_swift.obj \
		cpl_vsil_webhdfs.obj \
		cpl_vsil_hdfs.obj \
		cpl_vsil_curl_streaming.obj \
		cpl_vsil_stdin.obj \
		cpl_vsil_buffered_reader.obj \
		cpl_vsil_cache.obj \
		cpl_base64.obj \
		cpl_xml_validate.obj \
		cpl_spawn.obj \
		cpl_google_oauth2.obj \
		cpl_progress.obj \
		cpl_virtualmem.obj \
		cpl_worker_thread_pool.obj \
		cpl_vsil_crypt.obj \
		cpl_sha1.obj \
		cpl_sha256.obj \
		cpl_aws.obj \
		cpl_vsi_error.obj \
		cpl_cpu_features.obj \
		cpl_google_cloud.obj \
		cpl_azure.obj \
		cpl_alibaba_oss.obj \
		cpl_json_streaming_parser.obj \
		cpl_json_streaming_writer.obj \
		cpl_json.obj \
		cpl_md5.obj \
		cpl_swift.obj \
		cpl_vax.obj \
		cpl_vsil_uploadonclose.obj \
		$(ODBC_OBJ)

LIB	=	cpl.lib

GDAL_ROOT = ..

!INCLUDE ..\nmake.opt

!IFDEF ZLIB_EXTERNAL_LIB
EXTRAFLAGS = $(ZLIB_INC)
!ELSE
EXTRAFLAGS = -I..\frmts\zlib
!ENDIF

EXTRAFLAGS	= 	 $(EXTRAFLAGS) -DHAVE_LIBZ -I..\ogr\ogrsf_frmts\geojson\libjson

!IFDEF LIBICONV_INCLUDE
EXTRAFLAGS =	$(EXTRAFLAGS) -DHAVE_ICONV $(LIBICONV_CFLAGS) $(LIBICONV_INCLUDE)
!ENDIF

!IFDEF CURL_INC
EXTRAFLAGS =	$(EXTRAFLAGS) -DHAVE_CURL $(CURL_CFLAGS) $(CURL_INC)
!ENDIF

!IFDEF LIBXML2_INC
EXTRAFLAGS =	$(EXTRAFLAGS) -DHAVE_LIBXML2 $(LIBXML2_INC)
!ENDIF

!IFDEF CRYPTOPP_INC
EXTRAFLAGS =	$(EXTRAFLAGS) -DHAVE_CRYPTOPP $(CRYPTOPP_INC)
!ENDIF

!IFDEF USE_ONLY_CRYPTODLL_ALG
EXTRAFLAGS =	$(EXTRAFLAGS) -DUSE_ONLY_CRYPTODLL_ALG
!ENDIF

!IFDEF OPENSSL_INC
EXTRAFLAGS =	$(EXTRAFLAGS) -DHAVE_OPENSSL_CRYPTO $(OPENSSL_INC)
!ENDIF

!IFDEF ODBC_SUPPORTED
ODBC_OBJ =	cpl_odbc.obj
!ENDIF

default:	prev_dllbuild cpl_config.h $(LIB)

$(LIB):	$(OBJ)
	lib /out:cpl.lib *.obj

clean:
	-del *.obj *.lib cpl_config.h dllbuild.prev

# This "mechanism" updates a temporary dllbuild.prev file with the $(DLLBUILD) setting, but only
# when dllbuild.prev doesn't exist or doesn't match the current $(DLLBUILD) setting.
#
# The upside to this is that repeated builds with the same setting won't cause cpl_config.h to be
# regenerated, which should prevent unnecessary recompilation.
#
# It has to be done in a temporary/inline batch script because normal NMAKE commands apparently
# don't have extensions enabled which apparently prevents setting a variable from file contents.
prev_dllbuild:
	call <<prev_dllbuild.bat
@SETLOCAL ENABLEEXTENSIONS
IF NOT EXIST dllbuild.prev (ECHO $(DLLBUILD))> dllbuild.prev
SET /P PREV_DLLBUILD=<dllbuild.prev
IF NOT "%PREV_DLLBUILD%"=="$(DLLBUILD)" (ECHO $(DLLBUILD))> dllbuild.prev
<<

cpl_config.h:	dllbuild.prev \
				cpl_config.h.vc.begin \
				cpl_config.h.vc.common \
				cpl_config.h.vc.no_dll \
				cpl_config.h.vc.end
	type cpl_config.h.vc.begin > cpl_config.h
	type cpl_config.h.vc.common >> cpl_config.h
	IF NOT "$(DLLBUILD)"=="1" \
		type cpl_config.h.vc.no_dll >> cpl_config.h
	type cpl_config.h.vc.end >> cpl_config.h
