/*
 * Hdf5rFrameData.cpp
 *
 *  Created on: Sep 4, 2018
 *      Author: nielson
 */

#include <sstream>
#include <iomanip>
#include <string>
#include <iostream>

#include <cstdio>
#include <cstring>

#include "Hdf5rFrameData.h"

//******************************************************************************
// Default constructor
//******************************************************************************
Hdf5rFrameData::Hdf5rFrameData()
: CompoundBase( new FrameData_t )
{
    // generated by an awk script from list of 'c-type name' pairs
    // and a bit of editing of the array types and adding '_'s
    compoundElementMap_["frameNumber"]  = CompoundElement_t( "frameNumber",  HOFFSET(FrameData_t, frameNumber),  H5T_NATIVE_INT32,  CompoundElement_t::PT_I32, 0 );
    compoundElementMap_["imageStatus"]  = CompoundElement_t( "imageStatus",  HOFFSET(FrameData_t, imageStatus),  H5T_NATIVE_UINT64, CompoundElement_t::PT_U64, 0 );
    compoundElementMap_["beginChannel"] = CompoundElement_t( "beginChannel", HOFFSET(FrameData_t, beginChannel), H5T_NATIVE_INT32,  CompoundElement_t::PT_I32, 0 );
    compoundElementMap_["endChannel"]   = CompoundElement_t( "endChannel",   HOFFSET(FrameData_t, endChannel),   H5T_NATIVE_INT32,  CompoundElement_t::PT_I32, 0 );
    compoundElementMap_["numChannels"]  = CompoundElement_t( "numChannels",  HOFFSET(FrameData_t, numChannels),  H5T_NATIVE_INT32,  CompoundElement_t::PT_I32, 0 );
    compoundElementMap_["beginLine"]    = CompoundElement_t( "beginLine",    HOFFSET(FrameData_t, beginLine),    H5T_NATIVE_INT32,  CompoundElement_t::PT_I32, 0 );
    compoundElementMap_["endLine"]      = CompoundElement_t( "endLine",      HOFFSET(FrameData_t, endLine),      H5T_NATIVE_INT32,  CompoundElement_t::PT_I32, 0 );
    compoundElementMap_["numLines"]     = CompoundElement_t( "numLines",     HOFFSET(FrameData_t, numLines),     H5T_NATIVE_INT32,  CompoundElement_t::PT_I32, 0 );

    compoundElementMap_["AOI_name"]         = CompoundElement_t( "AOI_name",         HOFFSET(FrameData_t, AOI_name),         H5T_C_S1,         CompoundElement_t::PT_CSTR, sizeof(FrameData_t::AOI_name) );
    compoundElementMap_["AOI_beginLine"]    = CompoundElement_t( "AOI_beginLine",    HOFFSET(FrameData_t, AOI_beginLine),    H5T_NATIVE_INT32, CompoundElement_t::PT_I32, 0 );
    compoundElementMap_["AOI_endLine"]      = CompoundElement_t( "AOI_endLine",      HOFFSET(FrameData_t, AOI_endLine),      H5T_NATIVE_INT32, CompoundElement_t::PT_I32, 0 );
    compoundElementMap_["AOI_beginChannel"] = CompoundElement_t( "AOI_beginChannel", HOFFSET(FrameData_t, AOI_beginChannel), H5T_NATIVE_INT32, CompoundElement_t::PT_I32, 0 );
    compoundElementMap_["AOI_endChannel"]   = CompoundElement_t( "AOI_endChannel",   HOFFSET(FrameData_t, AOI_endChannel),   H5T_NATIVE_INT32, CompoundElement_t::PT_I32, 0 );

    compoundElementMap_["scanDir"]      = CompoundElement_t( "scanDir",      HOFFSET(FrameData_t, scanDir),      H5T_NATIVE_INT32,  CompoundElement_t::PT_I32, 0 );
    compoundElementMap_["numGeoPoints"] = CompoundElement_t( "numGeoPoints", HOFFSET(FrameData_t, numGeoPoints), H5T_NATIVE_INT32,  CompoundElement_t::PT_I32, 0 );
    compoundElementMap_["year"]         = CompoundElement_t( "year",         HOFFSET(FrameData_t, year),         H5T_NATIVE_INT32,  CompoundElement_t::PT_I32, 0 );
    compoundElementMap_["day"]          = CompoundElement_t( "day",          HOFFSET(FrameData_t, day),          H5T_NATIVE_INT32,  CompoundElement_t::PT_I32, 0 );
    compoundElementMap_["secondsOfDay"] = CompoundElement_t( "secondsOfDay", HOFFSET(FrameData_t, secondsOfDay), H5T_NATIVE_DOUBLE, CompoundElement_t::PT_DBL, 0 );
    compoundElementMap_["calNoCalFlag"] = CompoundElement_t( "calNoCalFlag", HOFFSET(FrameData_t, calNoCalFlag), H5T_NATIVE_INT32,  CompoundElement_t::PT_I32, 0 );
    compoundElementMap_["imageId"]      = CompoundElement_t( "imageId",      HOFFSET(FrameData_t, imageId),      H5T_NATIVE_INT32,  CompoundElement_t::PT_I32, 0 );
    compoundElementMap_["satPosECF"]    = CompoundElement_t( "satPosECF",    HOFFSET(FrameData_t, satPosECF),    H5T_NATIVE_DOUBLE, CompoundElement_t::PT_DBL, 3 );
    compoundElementMap_["satVelECF"]    = CompoundElement_t( "satVelECF",    HOFFSET(FrameData_t, satVelECF),    H5T_NATIVE_DOUBLE, CompoundElement_t::PT_DBL, 3 );

    compoundElementMap_["lineDeltaTimeSecs"]      = CompoundElement_t( "lineDeltaTimeSecs",      HOFFSET(FrameData_t, lineDeltaTimeSecs),      H5T_NATIVE_DOUBLE, CompoundElement_t::PT_DBL, 0 );
    compoundElementMap_["absoluteCalCoeff_kws"]   = CompoundElement_t( "absoluteCalCoeff_kws",   HOFFSET(FrameData_t, absoluteCalCoeff_kws),   H5T_NATIVE_DOUBLE, CompoundElement_t::PT_DBL, 0 );
    compoundElementMap_["absoluteCalCoeff_wcmsq"] = CompoundElement_t( "absoluteCalCoeff_wcmsq", HOFFSET(FrameData_t, absoluteCalCoeff_wcmsq), H5T_NATIVE_DOUBLE, CompoundElement_t::PT_DBL, 0 );

    compoundElementMap_["sosCTCsecs"]           = CompoundElement_t( "sosCTCsecs",           HOFFSET(FrameData_t, sosCTCsecs),           H5T_NATIVE_DOUBLE, CompoundElement_t::PT_DBL, 0 );
    compoundElementMap_["sosSeqIndex"]          = CompoundElement_t( "sosSeqIndex",          HOFFSET(FrameData_t, sosSeqIndex),          H5T_NATIVE_INT32,  CompoundElement_t::PT_I32, 0 );
    compoundElementMap_["sosStepIndex"]         = CompoundElement_t( "sosStepIndex",         HOFFSET(FrameData_t, sosStepIndex),         H5T_NATIVE_INT32,  CompoundElement_t::PT_I32, 0 );
    compoundElementMap_["sosDirection"]         = CompoundElement_t( "sosDirection",         HOFFSET(FrameData_t, sosDirection),         H5T_NATIVE_INT32,  CompoundElement_t::PT_I32, 0 );
    compoundElementMap_["sosScaSelectStr"]      = CompoundElement_t( "sosScaSelectStr",      HOFFSET(FrameData_t, sosScaSelectStr),      H5T_C_S1,          CompoundElement_t::PT_CSTR, sizeof(FrameData_t::sosScaSelectStr) );
    compoundElementMap_["sosParentAimPtStr"]    = CompoundElement_t( "sosParentAimPtStr",    HOFFSET(FrameData_t, sosParentAimPtStr),    H5T_C_S1,          CompoundElement_t::PT_CSTR, sizeof(FrameData_t::sosParentAimPtStr) );
    compoundElementMap_["sosScanRateMradUsecs"] = CompoundElement_t( "sosScanRateMradUsecs", HOFFSET(FrameData_t, sosScanRateMradUsecs), H5T_NATIVE_DOUBLE, CompoundElement_t::PT_DBL, 0 );
    compoundElementMap_["sosFrameTimeUsecs"]    = CompoundElement_t( "sosFrameTimeUsecs",    HOFFSET(FrameData_t, sosFrameTimeUsecs),    H5T_NATIVE_DOUBLE, CompoundElement_t::PT_DBL, 0 );
    compoundElementMap_["sosBlankTimeUsecs"]    = CompoundElement_t( "sosBlankTimeUsecs",    HOFFSET(FrameData_t, sosBlankTimeUsecs),    H5T_NATIVE_DOUBLE, CompoundElement_t::PT_DBL, 0 );
    compoundElementMap_["sosLongIntUsecs"]      = CompoundElement_t( "sosLongIntUsecs",      HOFFSET(FrameData_t, sosLongIntUsecs),      H5T_NATIVE_DOUBLE, CompoundElement_t::PT_DBL, 0 );
    compoundElementMap_["sosShortIntUsecs"]     = CompoundElement_t( "sosShortIntUsecs",     HOFFSET(FrameData_t, sosShortIntUsecs),     H5T_NATIVE_DOUBLE, CompoundElement_t::PT_DBL, 0 );

    compoundElementMap_["sosIntegMode"]    = CompoundElement_t( "sosIntegMode",    HOFFSET(FrameData_t, sosIntegMode),    H5T_C_S1,         CompoundElement_t::PT_CSTR, sizeof(FrameData_t::sosIntegMode) );
    compoundElementMap_["minCalIntensity"] = CompoundElement_t( "minCalIntensity", HOFFSET(FrameData_t, minCalIntensity), H5T_NATIVE_INT32, CompoundElement_t::PT_I32, 0 );
    compoundElementMap_["maxCalIntensity"] = CompoundElement_t( "maxCalIntensity", HOFFSET(FrameData_t, maxCalIntensity), H5T_NATIVE_INT32, CompoundElement_t::PT_I32, 0 );
    compoundElementMap_["linesReversed"]   = CompoundElement_t( "linesReversed",   HOFFSET(FrameData_t, linesReversed),   H5T_NATIVE_INT32, CompoundElement_t::PT_I32, 0 );
    compoundElementMap_["chansReversed"]   = CompoundElement_t( "chansReversed",   HOFFSET(FrameData_t, chansReversed),   H5T_NATIVE_INT32, CompoundElement_t::PT_I32, 0 );

    compoundElementMap_["UL_lat"] = CompoundElement_t( "UL_lat", HOFFSET(FrameData_t, UL_lat),  H5T_NATIVE_FLOAT, CompoundElement_t::PT_FLT, 0 );
    compoundElementMap_["UL_lon"] = CompoundElement_t( "UL_lon", HOFFSET(FrameData_t, UL_lon),  H5T_NATIVE_FLOAT, CompoundElement_t::PT_FLT, 0 );
    compoundElementMap_["UR_lat"] = CompoundElement_t( "UR_lat", HOFFSET(FrameData_t, UR_lat),  H5T_NATIVE_FLOAT, CompoundElement_t::PT_FLT, 0 );
    compoundElementMap_["UR_lon"] = CompoundElement_t( "UR_lon", HOFFSET(FrameData_t, UR_lon),  H5T_NATIVE_FLOAT, CompoundElement_t::PT_FLT, 0 );
    compoundElementMap_["LL_lat"] = CompoundElement_t( "LL_lat", HOFFSET(FrameData_t, LL_lat),  H5T_NATIVE_FLOAT, CompoundElement_t::PT_FLT, 0 );
    compoundElementMap_["LL_lon"] = CompoundElement_t( "LL_lon", HOFFSET(FrameData_t, LL_lon),  H5T_NATIVE_FLOAT, CompoundElement_t::PT_FLT, 0 );
    compoundElementMap_["LR_lat"] = CompoundElement_t( "LR_lat", HOFFSET(FrameData_t, LR_lat),  H5T_NATIVE_FLOAT, CompoundElement_t::PT_FLT, 0 );
    compoundElementMap_["LR_lon"] = CompoundElement_t( "LR_lon", HOFFSET(FrameData_t, LR_lon),  H5T_NATIVE_FLOAT, CompoundElement_t::PT_FLT, 0 );

    compoundElementMap_["flowControl"]       = CompoundElement_t( "flowControl",       HOFFSET(FrameData_t, flowControl),       H5T_NATIVE_INT32, CompoundElement_t::PT_I32, 0 );
    compoundElementMap_["imageScaSelectStr"] = CompoundElement_t( "imageScaSelectStr", HOFFSET(FrameData_t, imageScaSelectStr), H5T_C_S1,         CompoundElement_t::PT_CSTR, sizeof(FrameData_t::imageScaSelectStr) );
}

//******************************************************************************
// Destructor
//******************************************************************************
Hdf5rFrameData::~Hdf5rFrameData()
{}

//******************************************************************************
// Function to format a reference number into an attribute name
//******************************************************************************
std::string Hdf5rFrameData::formatAttribute( const std::string& name,
                                             unsigned frameNumber ) const
{
    // prepend the the frame prefix to the attribute name
    std::string fmtString = FRAME_FMT_PREFIX + name;

    // use snprintf to format the frame number into the string.
    char wkbuff[256];
    std::snprintf( wkbuff, 255, fmtString.c_str(), frameNumber );

    return std::string( wkbuff );
}

//******************************************************************************
// Build formatted string of selected attributes in FrameData_t
//******************************************************************************
std::string Hdf5rFrameData::FrameData_t::toString() const
{
    std::ostringstream oss;
    oss << "         frameNumber: " << frameNumber << std::endl
        << "                year: " << year << std::endl
        << "                 day: " << day << std::endl
        << "         seconsOfDay: " << secondsOfDay << std::endl
        << "   lineDeltaTimeSecs: " << lineDeltaTimeSecs << std::endl
        << "           satPosECF: " << satPosECF[0] << " " << satPosECF[1] << " " << satPosECF[2] << std::endl
        << "           satVelECF: " << satVelECF[0] << " " << satVelECF[1] << " " << satVelECF[2] << std::endl
        << "        numGeoPoints: " << numGeoPoints << std::endl
        << "          upper left: " << UL_lat << " " << UL_lon << std::endl
        << "         upper right: " << UR_lat << " " << UR_lon << std::endl
        << "          lower left: " << LL_lat << " " << LL_lon << std::endl
        << "         lower right: " << LR_lat << " " << LR_lon << std::endl
        << "absoluteCalCoeff_kws: " << absoluteCalCoeff_kws << std::endl;

    return oss.str();
}
